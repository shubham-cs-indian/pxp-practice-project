//$.evalFile(File('./JSON.jsx'));//$.evalFile(File('./InDesignError.jsx'));//$.evalFile(File('./CommonService.jsx'));//$.evalFile(File('./ProductTemplateLinkingService.jsx'));//$.evalFile(File('./SimpleFrameLinkingService.jsx'));$.Constants = {  ADD_ARTICLE: "add_article",  DELETE_ARTICLE: "delete_article",  MODIFY_ARTICLE: "modify_article",  ADD_PRODUCT_TEMPLATE: "add_product_template",  DELETE_PRODUCT_TEMPLATE: "delete_product_template",  SLOT_EXCHANGE: "slot_exchange",  ADD_PRODUCT_TEMPLATE_ADD_ARTICLE: "add_product_template_add_article",  DELETE_PRODUCT_TEMPLATE_DELETE_ARTICLE: "delete_product_template_delete_article",  ADD_PRODUCT_TEMPLATE_DELETE_ARTICLE: "add_product_template_delete_article",  ADD_PRODUCT_TEMPLATE_MODIFY_ARTICLE: "add_product_template_modify_article",};var result = "";$.readyForIndesign = function (sScriptRequestModel) {  var oScriptRequestModel =  JSON.parse(sScriptRequestModel);  var sDTZipPath = oScriptRequestModel.documentTemplateZipPath;  var sPTZipPath = oScriptRequestModel.productTemplatesDirectory;  var sDTDirectory = sDTZipPath.slice(0,-4);  var sPTDirectory;  var oDTZip = new File(sDTZipPath);  var oDTDirectory =  new File(sDTDirectory);  var oPTDirectory;  app.unpackageUCF(oDTZip, oDTDirectory);  $.printMessage("dt zip-"+sDTZipPath);  if (sPTZipPath) {    var oPTZip = new File(sPTZipPath);    $.printMessage("pt zip-"+sPTZipPath);    sPTDirectory = sPTZipPath.slice(0,-4);    oPTDirectory =  new File(sPTDirectory);    $.CommonService.PRODUCT_TEMPLATE_DIRECTORY  = sPTDirectory;    app.unpackageUCF(oPTZip, oPTDirectory);  }  $.CommonService.DOCUMENT_TEMPLATE_DIRECTORY = sDTDirectory;  $.CommonService.DOCUMENT_TEMPLATE_NAME = oScriptRequestModel.documentTemplateName;  try {    $.printMessage("**** DT url to open = " + $.CommonService.DOCUMENT_TEMPLATE_DIRECTORY +        "/" + $.CommonService.DOCUMENT_TEMPLATE_NAME + ".indd");    var oDocument = app.open(new File($.CommonService.DOCUMENT_TEMPLATE_DIRECTORY +                             "/" + $.CommonService.DOCUMENT_TEMPLATE_NAME + ".indd"));    $.CommonService.ACTIVE_DOCUMENT_TEMPLATE = oDocument;  } catch (e) {    $.printMessage("??? ERROR: Error in opening document template = " + sDocumentTemplateName);  }  // . EXECUTE ACTION MODELS TO PLACE CONTENT  ///-------------------------------------------  var oResult = $.CommonService.executeActionModel(oScriptRequestModel);  //. INSERT DTP GROUP INFO INTO FRAMES  ///-------------------------------------------  if (oResult.status === "success") {    $.CommonService.insertDtpGroupInfoInFramesUsingActionModel(oResult.actionModels, oDocument);  }  // . PROCESS DOCUMENT TO GENERATE NEW FRAME IDS.  ///---------------------------------------------  try {    $.PublicationDocumentService.processPublicationDocument(oDocument, oScriptRequestModel.documentTemplateId);  } catch (e) {    $.printMessage("??? ERROR: Error in processPublicationDocument= " + e.message);  }  // . GET NEW DOCUMENT OBJECT CONTAINING NEWLY PLACED FRAMES, PAGES, PLACED SLOTS.  var oSaveResult = $.DocumentTemplateService.saveDocumentTemplate(oScriptRequestModel.documentTemplateId, oScriptRequestModel.documentTemplateName,                                                  ".indd", $.CommonService.DOCUMENT_TEMPLATE_DIRECTORY, true);  oResult.documentModel = oSaveResult;  $.printMessage("Save result =" + JSON.stringify(oSaveResult));  $.CommonService.ACTIVE_DOCUMENT_TEMPLATE.close();  if (oResult.status == "success") {    result = JSON.stringify(oResult);  } else {    result = JSON.stringify({status: "failure"});  }  return;};//////////////////////////////////////////////////////////////////////-----------   COMMON SERVICE .jsx ------------///////////////////////////////////////////////////////////////////$.CommonService = {  sPlaceholderText       : "Placeholder",  SEPERATOR_TOKEN        : "_-",  noObjectStyleList      : ["[None]", "[Ohne]"],  sMisMatchedCSObjectType: "MISMATCHED_CSOBJECT_TYPE",  CLASS_NAME             : "CommonService.jsx",  ATTR_INFO              : "attributeInfo",  ITEM_INFO              : "itemInfo",  METATOKEN              : "#_#",  IDSN_ID                : "indesignID",  inlineSelectionTypes   :  ['Word', 'Character', 'Text', 'Paragraph', 'InsertionPoint', 'TextColumn', 'TextStyleRange',                             'Line'],  frameSelectionTypes    : ['TextFrame', 'Rectangle', 'Oval', 'Polygon'],  tagLevelFrameInline         : "frameInline",  tagLevelFrame          : "frame",  //this is used for rectangle also  tagLevelCell           : "cell",  tagLevelCellInline     : "cellInline",  tagLevelTableFrame     : "tableFrame",  tableAttributeTypes    : ["flextable",                            "table"],  specialAttributeTypes  : ["html",                            "placeholder",                            "selection",                            "valuerange",                            "stringfunction",                            "readonly",                            "reference",                            "articlereference",                            "eval",                            "template"],  EMPTY_CONTENT          : "no value",  DOCUMENT_TEMPLATE_TYPE : "DT",  PRODUCT_TEMPLATE_TYPE  : "IT",  FILE_PLACE_ATTEMPT_COUNT : 10,  SLEEP_TIME : 500,  DOCUMENT_TEMPLATE_DIRECTORY : "",  PRODUCT_TEMPLATE_DIRECTORY : "",  DOCUMENT_TEMPLATE_NAME : "",  ACTIVE_DOCUMENT_TEMPLATE : null,  executeActionModel: function (oScriptRequestModel) {    $.printMessage("*** executeActionModel ***");    var oResult = {};    try {      var aActionModels = oScriptRequestModel.contentForActionModel.modelMap.actionModels;      var oPlannedSlots = oScriptRequestModel.contentForActionModel.modelMap.plannedSlots;      $.printMessage("** Action models length -=" + JSON.stringify(aActionModels.length ));      for (var iActionModel = aActionModels.length - 1; iActionModel >= 0; iActionModel--) {        var oActionModel = aActionModels[iActionModel];        var oLinkedInfo;        var sFilePath = "";        var oPlaceholderContent = {};        var oProductTemplateLinkingResult = {};        var convertedDocDetails = {};        switch(oActionModel.action) {          /*case $.Constants.ADD_ARTICLE:          case $.Constants.MODIFY_ARTICLE:            oPlaceholderContent = oActionModel.productTemplateAndLinkingInformation.placeholderContent;            var iPlaceholderLength = $.CommonService.getObjectLength(oPlaceholderContent);            $.CommonService.placeContentInPlaceholdersInteranal(oPlaceholderContent, iPlaceholderLength, [], {});            break;          case $.Constants.DELETE_ARTICLE:            var oCurrentlyLinkedTagInfo = oActionModel.currentlyLinkedTagInfo;            var sSlotId = oActionModel.slotId;            $.ProductTemplateLinkingService.deleteContentOfGroup(sSlotId, JSON.stringify(oCurrentlyLinkedTagInfo));            break;          case $.Constants.DELETE_PRODUCT_TEMPLATE:          case $.Constants.DELETE_PRODUCT_TEMPLATE_DELETE_ARTICLE:            $.CommonService.deleteProductTemplateFromSlot(oActionModel.slotId);            break;          case $.Constants.ADD_PRODUCT_TEMPLATE:          case $.Constants.ADD_PRODUCT_TEMPLATE_DELETE_ARTICLE:            $.CommonService.deleteProductTemplateFromSlot(oActionModel.slotId);            oLinkedInfo = $.CommonService.linkProductTemplateFromActionModel(sFilePath, oPlaceholderContent, oProductTemplateLinkingResult,               convertedDocDetails, oActionModel);            oActionModel.linkedInfo = oLinkedInfo.newLinkedInfo;            oActionModel.frameIds = oLinkedInfo.frameIds;            break;*/          case $.Constants.ADD_PRODUCT_TEMPLATE_MODIFY_ARTICLE:          case $.Constants.ADD_PRODUCT_TEMPLATE_ADD_ARTICLE:            ///////            var oPlannedSlot = oPlannedSlots[oActionModel.slotId];            var oProductTemplateAndLinkingInformation = oActionModel.productTemplateAndLinkingInformation;            oActionModel.productTemplateAndLinkingInformation.slot = oPlannedSlots[oActionModel.slotId];            oProductTemplateAndLinkingInformation.plannedSlot = oPlannedSlot;            ////////            $.CommonService.deleteProductTemplateFromSlot(oActionModel.slotId);            var sProductTemplateName = "/" + oActionModel.productTemplateAndLinkingInformation.instance.name + ".idms";            sFilePath = $.CommonService.PRODUCT_TEMPLATE_DIRECTORY + sProductTemplateName;            $.printMessage("prepared PT path="+ sFilePath);            oLinkedInfo = $.CommonService.linkProductTemplateFromActionModel(sFilePath, oPlaceholderContent,                oProductTemplateLinkingResult, convertedDocDetails, oActionModel);            var iPlaceholderLength = $.CommonService.getObjectLength(oLinkedInfo.newPlaceholderContent);            $.CommonService.placeContentInPlaceholdersInteranal(oLinkedInfo.newPlaceholderContent,                                                                 iPlaceholderLength, [], {});            oActionModel.frameIds = oLinkedInfo.frameIds;            oActionModel.linkedInfo = oLinkedInfo.newLinkedInfo;            $.CommonService.insertLinkedInfoInFrames(oLinkedInfo.newLinkedInfo);          break;        }        if (oActionModel.productTemplateAndLinkingInformation && oActionModel.productTemplateAndLinkingInformation.placeholderContent) {          delete oActionModel.productTemplateAndLinkingInformation.placeholderContent        }      }      $.printMessage("*** SUCCESS: executeActionModel");      oResult.status = "success";    } catch (e) {      $.printMessage("??? ERROR: executeActionModel - " + e.message);      oResult.status = "failure";    } finally {      $.CommonService.ACTIVE_DOCUMENT_TEMPLATE.save($.CommonService.DOCUMENT_TEMPLATE_DIRECTORY + "/" +                                                    $.CommonService.DOCUMENT_TEMPLATE_NAME + ".indd");     // $.CommonService.ACTIVE_DOCUMENT_TEMPLATE.close();    }    oResult.actionModels = aActionModels;    return oResult;  },  linkProductTemplateFromActionModel: function (sFilePath, oPlaceholderContent, oProductTemplateLinkingResult,                                                convertedDocDetails, oActionModel) {    $.printMessage("*** linkProductTemplateFromActionModel ***");    var sProductTemplateInstanceId = oActionModel.productTemplateInstanceId;    var slinkedEntityId = oActionModel.linkedEntityId;    var sSlotId = oActionModel.slotId;    var oSlot = oActionModel.productTemplateAndLinkingInformation.plannedSlot;    //sFilePath = oActionModel.productTemplateAndLinkingInformation.filePath;    oPlaceholderContent = oActionModel.productTemplateAndLinkingInformation.placeholderContent;    oProductTemplateLinkingResult = $.ProductTemplateLinkingService.createItemTemplateLinkInternal    (sProductTemplateInstanceId, sFilePath, sSlotId, oSlot);    if (oProductTemplateLinkingResult.data.docConverted) {      convertedDocDetails = oProductTemplateLinkingResult.data.convertedDocDetails;    }    var oOldLinkedInfo = $.CommonService.createLinkedInfoFromFramesModel    (oActionModel.productTemplateAndLinkingInformation.instance.frames);    var aAddedTags = oProductTemplateLinkingResult.data.addedTags;    var oUpdatedInfo = $.CommonService.createAddedLinkedInfoFromAddedTags(aAddedTags, oOldLinkedInfo,        oPlaceholderContent, sSlotId, slinkedEntityId);    oUpdatedInfo.frameIds = oProductTemplateLinkingResult.data.frameIds;    return oUpdatedInfo;  },  createAddedLinkedInfoFromAddedTags: function(aAddedTag, oOldItemTemplateTagInfo, oOldPlaceholderContent, sSlotId,                                               slinkedEntityId) {    var oResult = {newLinkedInfo: {}, newPlaceholderContent: {}};    for (var iAddedTagCount = aAddedTag.length -1; iAddedTagCount >= 0; iAddedTagCount--) {      var oSourceTagInfo = oOldItemTemplateTagInfo[aAddedTag[iAddedTagCount].isCopyOf];      var oNewTagInfo = {};      oNewTagInfo.placeholderId = aAddedTag[iAddedTagCount].placeholderId;      oNewTagInfo.placeholderType = oSourceTagInfo.placeholderType;      oNewTagInfo.assetInstanceId = oSourceTagInfo.assetInstanceId;      oNewTagInfo.slotId = sSlotId;      if (oSourceTagInfo.attributeId) {        oNewTagInfo.attributeId = oSourceTagInfo.attributeId;        oNewTagInfo.linkedEntityId = slinkedEntityId;      }      // update currentlyLinkedTagInfo      oResult.newLinkedInfo[aAddedTag[iAddedTagCount].placeholderId] = oNewTagInfo;      if (oOldPlaceholderContent && oOldPlaceholderContent[aAddedTag[iAddedTagCount].isCopyOf]) {        oResult.newPlaceholderContent[aAddedTag[iAddedTagCount].placeholderId] = oOldPlaceholderContent[aAddedTag[iAddedTagCount].isCopyOf];      }    }    if (oOldPlaceholderContent && oOldPlaceholderContent.defaultArticleImage) {      oResult.newPlaceholderContent.defaultArticleImage = oOldPlaceholderContent.defaultArticleImage;    }    return oResult;  },  createLinkedInfoFromFramesModel: function (oFrames) {    var oLinkedInfo = {};    for (var sFrameName in oFrames) {      if (oFrames[sFrameName]) {        var oFrame = oFrames[sFrameName];        var oPlaceholders = oFrame.placeholders;        for (var sPlaceholderId in oPlaceholders) {          var oPlaceholder = oPlaceholders[sPlaceholderId];          oLinkedInfo[sPlaceholderId] = oPlaceholder;        }      }    }    return oLinkedInfo;  },  setDocumentPreferencesToPoints: function (oDocument) {    //Dimension settings    oDocument.viewPreferences.verticalMeasurementUnits = MeasurementUnits.POINTS;    oDocument.viewPreferences.horizontalMeasurementUnits = MeasurementUnits.POINTS;    oDocument.viewPreferences.rulerOrigin = RulerOrigin.SPREAD_ORIGIN;  },  getOriginalDocumentPreferences: function (oDocument) {    //Dimension settings    var oDocumentPreferences = {};    oDocumentPreferences.verticalMeasurementUnits = oDocument.viewPreferences.verticalMeasurementUnits;    oDocumentPreferences.horizontalMeasurementUnits = oDocument.viewPreferences.horizontalMeasurementUnits;    oDocumentPreferences.rulerOrigin = oDocument.viewPreferences.rulerOrigin;    return oDocumentPreferences;  },  setOriginalDocumentPreferences: function (oDocument, oDocumentPreferences) {    //Dimension settings    oDocument.viewPreferences.verticalMeasurementUnits = oDocumentPreferences.verticalMeasurementUnits;    oDocument.viewPreferences.horizontalMeasurementUnits = oDocumentPreferences.horizontalMeasurementUnits;    oDocument.viewPreferences.rulerOrigin = oDocumentPreferences.rulerOrigin;  },  convertToDtpDocument: function (oDocument) {    var sUniqueToken = new Date().getTime().toString();    oDocument.insertLabel('uniqueToken',sUniqueToken);    oDocument.insertLabel('templateType','DT');    oDocument.insertLabel('docConverted','true');    $.CommonService.writeFrameIdInAllFrames(oDocument, sUniqueToken);    return sUniqueToken;  },  writeFrameIdInAllFrames: function (oDocument, sUniqueToken) {    var aFrames = oDocument.allPageItems;    for(var i = aFrames.length-1; i >= 0; i--){      if(aFrames[i].isValid){        aFrames[i].insertLabel($.CommonService.IDSN_ID, sUniqueToken + $.CommonService.METATOKEN + aFrames[i].id);      }    }  },  getAllFramesUniqueIDInPage: function (oSpread) {    try {      var aFrameUniqueID = [];      var aFramesInPage = oSpread.allPageItems;      for (var iFrameCount = 0; iFrameCount < aFramesInPage.length; iFrameCount++) {        var iFrameUniqueID = aFramesInPage[iFrameCount].id;        aFrameUniqueID.push(iFrameUniqueID);      }      return aFrameUniqueID;    } catch (e) {      throw e;    }  },  placeContentFromPath: function (oItem, sPath, aCoordinates) {    $.printMessage("*** placeContentFromPath *** - " +sPath);    var iPlaceAttemptCount = 0;    do {      try {        if (aCoordinates) {          oItem.place(sPath, aCoordinates);        } else {          oItem.place(sPath);          if (oItem.constructor.name == "Rectangle") {            if (oItem.images.length && oItem.images[0].itemLink.status != LinkStatus.NORMAL) {              oItem.images[0].itemLink.update();            } else if (oItem.epss.length && oItem.epss[0].itemLink.status != LinkStatus.NORMAL){              oItem.epss[0].itemLink.update();            } else if (oItem.pdfs.length && oItem.pdfs[0].itemLink.status != LinkStatus.NORMAL){              oItem.pdfs[0].itemLink.update();            }          }        }        break;      } catch (e) {         $.printMessage("??? Error in placing content -" + e.message);        var errorString = e.toString();        if (errorString.indexOf("Diese Datei ist bereits von einem anderen Benutzer oder") !== -1 ||            errorString.indexOf("This file is already open by another user") !== -1) {          iPlaceAttemptCount++;          if (iPlaceAttemptCount === $.CommonService.FILE_PLACE_ATTEMPT_COUNT) {            throw e;          }          $.sleep($.CommonService.SLEEP_TIME);        } else {          throw e;        }      }    } while (iPlaceAttemptCount < $.FILE_PLACE_ATTEMPT_COUNT);  },  generateUUID: function () {    var iCurrentTimeStamp = new Date().getTime();    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {      var iRandom = (iCurrentTimeStamp + Math.random() * 16) % 16 | 0;      iCurrentTimeStamp = Math.floor(iCurrentTimeStamp / 16);      return (c == 'x' ? iRandom : (iRandom & 0x3 | 0x8)).toString(16);    });    return uuid;  },  /**Returns a random color in RGB array format, which can be assigned to markupTag.tagColor   * @returns array: RGB value   */  getARandomColorForTag: function () {    return [Math.random().toString() * 255, Math.random().toString() * 255, Math.random().toString() * 255];  },  createAndSetNewParentTags: function (oFrame, color) {    $.printMessage("*** createAndSetNewParentTags ***");    var oParentXMLElement = oFrame.associatedXMLElement;    if(!oParentXMLElement){      return;    }    var aXMLElement = [];    aXMLElement.push(oParentXMLElement);    while (aXMLElement.length > 0) {      var oXMLElement = aXMLElement.pop();      var oTag = oXMLElement.markupTag;      if (!$.CommonService.isCSDTPTag(oTag.name)) {        var oRandomTag = $.CommonService.getATagObjectWithSomeRandName();        oRandomTag.tagColor = color;        oXMLElement.markupTag = oRandomTag;      } else {        oTag.tagColor = color;      }      var aChildElements = oXMLElement.xmlElements;      var iChildCount = aChildElements.length;      while (iChildCount > 0) {        iChildCount--;        aXMLElement.push(aChildElements[iChildCount]);      }    }  },  getATagObjectWithSomeRandName: function () {    var oDoc = $.CommonService.ACTIVE_DOCUMENT_TEMPLATE;    var sTemplateType = oDoc.extractLabel("templateType");    var oTag;    var iTryCount = 0;    do {      try {        oTag = $.CommonService.ACTIVE_DOCUMENT_TEMPLATE.xmlTags.add("DTP_Parent" + (Math.random()*100000).toString().substr(0,5));        break;      } catch (e) {        //Try to generate the name again      }    } while (iTryCount++ < 10000);    if (sTemplateType == $.CommonService.PRODUCT_TEMPLATE_TYPE) {      var sDocTagsColor = $.CommonService.getRGBValueForIT();      oTag.tagColor = sDocTagsColor;    }    return oTag;  },  deleteProductTemplateFromSlot: function (sSlotId) {    var oActiveDoc = $.CommonService.ACTIVE_DOCUMENT_TEMPLATE;    var aFrames = oActiveDoc.allPageItems;    for (var iFrameCount = aFrames.length - 1; iFrameCount >= 0; iFrameCount--) {      var oFrame = aFrames[iFrameCount];      if (oFrame.isValid) {        var oSlotInfo = $.CommonService.getSlotInfo(oFrame);        if (oSlotInfo.slotFound && oSlotInfo.slotId == sSlotId) {          oFrame.remove();        }      }    }  },  /**renameTagsWithCopiedFromInfo() - Renames the input tags as per document name, also adds 'isCopyOf' info with   * old tag name   * @param sUniqueToken - Name of Document template   * @param aTagsOfFrame - Array of tags to be renamed   * @param oFrame - Object of frame containing the tags   * @returns {*}   */  renameTagsWithCopiedFromInfo: function (sUniqueToken, aTagsOfFrame, oFrame) {    $.printMessage("*** renameTagsWithCopiedFromInfo ***");    for (var iTagCount = 0; iTagCount < aTagsOfFrame.length; iTagCount++) {      var sCurrentName = aTagsOfFrame[iTagCount].name;      if (sCurrentName.indexOf("csdtp") != -1) {        var sNewName = $.DocumentTemplateService.regenerateLabel(sUniqueToken, aTagsOfFrame[iTagCount]);        aTagsOfFrame[iTagCount].insertLabel("Name", sNewName);        aTagsOfFrame[iTagCount].insertLabel("isCopyOf", sCurrentName);        aTagsOfFrame[iTagCount].name = sNewName;        //Copy the linked info against new tag        $.CommonService.copyTheLinkedInfoFromOldTag(oFrame, sCurrentName, sNewName);      }    }    return aTagsOfFrame;  },  /**Replace the linked info against the the old tag name in the frame label with new tag name   * @param oFrame   * @param sOldTagName   * @param sNewTagName   */  copyTheLinkedInfoFromOldTag: function(oFrame, sOldTagName, sNewTagName) {    //Get the info from Old tag name    var sOldTagInfo  = oFrame.extractLabel(sOldTagName);    //Remove the info from old tag name    oFrame.insertLabel(sOldTagName, "");    //Update old tag info    var oOldTagInfo = JSON.parse(sOldTagInfo);    if (oOldTagInfo.slotId) {      var oDtpGroupInfo = this.getSlotInfo(oFrame);      if (oDtpGroupInfo.slotFound) {        var oDtpGroup = oDtpGroupInfo.slotInfo;        oOldTagInfo.slotId = oDtpGroup.slotId;      } else {        delete oOldTagInfo.slotId;      }    }    var sNewTagInfo = JSON.stringify(oOldTagInfo);        //Insert same info against the new tag name    oFrame.insertLabel(sNewTagName, sNewTagInfo);        return sNewTagInfo;  },  getObjectLength: function(oObject) {    var size = 0, key;    for (key in oObject) {      if (oObject.hasOwnProperty(key)) size++;    }    return size;  },  placeContentInPlaceholdersInteranal: function(oTagsContent, numberOfTags, aTagsSpecialContent, oAdditionalInfo) {    $.printMessage("*** placeContentInPlaceholdersInteranal ***");    var oResult = {};    var oActiveDocument = $.CommonService.ACTIVE_DOCUMENT_TEMPLATE;    var oDocumentPreference = $.CommonService.getOriginalDocumentPreferences(oActiveDocument);    try {      $.CommonService.setDocumentPreferencesToPoints(oActiveDocument);      var oSpecialTagContent  = {};      for (var iSpecialTagIndex = 0; iSpecialTagIndex < aTagsSpecialContent.length; iSpecialTagIndex++) {        var sTagName = aTagsSpecialContent[iSpecialTagIndex];        if (oTagsContent.hasOwnProperty(sTagName)) {          oSpecialTagContent[sTagName] = oTagsContent[sTagName];        }      }      var oTagData            = {};      oTagData.tagDetails     = oSpecialTagContent;      oTagData.tagNames       = aTagsSpecialContent;      var oResult             = {};      if (aTagsSpecialContent.length && !oAdditionalInfo.replaceFlexImages) {        $.printMessage("*** special tag content ***");        var sResponse = $.TaggedTextUtils.getFormattedContentForMultiLineAttribute(oTagData);        var oResponse = JSON.parse(sResponse)        for (var sTagName in oResponse.tagDetails) {          oTagsContent[sTagName] = oResponse.tagDetails[sTagName];        }        oResult.data  = oResponse.data;      }      $.printMessage("*** Tag contents -" + JSON.stringify(oTagsContent));      var oReplacedTagsStatus = $.CommonService.continuePlacingContentInPlaceholders(oTagsContent, numberOfTags,          oAdditionalInfo.replaceFlexImages);      oResult.tags = oReplacedTagsStatus.data;      if (oReplacedTagsStatus.status == "success") {        oResult.status = "success";      } else {        oResult.status = "failure"      }      $.CommonService.setOriginalDocumentPreferences(oActiveDocument, oDocumentPreference);    }    catch (e) {      $.printMessage("??? ERROR: placeContentInPlaceholdersInteranal - " + e.message);      var error = new InDesignError(e);      oResult.message = error.getErrorMessage($.CommonService.CLASS_NAME);      oResult.status = "failure";    } finally {      $.CommonService.setOriginalDocumentPreferences(oActiveDocument, oDocumentPreference);    }    return oResult;  },  /**   * Traverses the whole document and places the contents whenever the tag is found   * @param oTagsContent - the tags for which the content is to be generated   * @param numberOfTagsToReplace - the number of tags for which the contents are to be generated   * @returns {{}}   */  continuePlacingContentInPlaceholders: function (oTagsContent, numberOfTagsToReplace, bReplaceFlexImages) {    $.printMessage("*** continuePlacingContentInPlaceholders ***");    var oActiveDocument = $.CommonService.ACTIVE_DOCUMENT_TEMPLATE;    var oDocumentPreference = {};    var sTagName = "";    try {      var numberOfTags = numberOfTagsToReplace;      var aSuccessfulContentGeneration = [];      var failedContentGeneration = [];      var aAllPageItems = oActiveDocument.allPageItems;      var iPageItemCount = aAllPageItems.length;      var oResult = {};      oResult.status = "success";      oResult.data = {};      oResult.data.slotInfo = {};      oResult.data.flexTableFrameIds = [];      oDocumentPreference = $.CommonService.getOriginalDocumentPreferences(oActiveDocument);      $.CommonService.setDocumentPreferencesToPoints(oActiveDocument);      for (var iPageItem = 0; iPageItem < iPageItemCount; iPageItem++) {        var oPageItem = aAllPageItems[iPageItem];        if ($.aFrameTypes.contains(oPageItem.constructor.name)) {          if (oPageItem.isValid) {            var oDtpGroupInfo = $.CommonService.getSlotInfo(oPageItem);            var oFrameXmlElement = oPageItem.associatedXMLElement;            var aXMLElement = [];            if (oFrameXmlElement) {              aXMLElement.push(oFrameXmlElement);              while (aXMLElement.length > 0) {                var oXMLElement = aXMLElement.pop();                if (oTagsContent.hasOwnProperty(oXMLElement.markupTag.name)) {                  var bResult = false;                  var oContent = oTagsContent[oXMLElement.markupTag.name];                  var bDoesParaStyleExists = oTagsContent[oXMLElement.markupTag.name].doesParaStyleExists;                  sTagName = oXMLElement.markupTag.name;                  try {                    var oPlacedResult = $.CommonService.placeContents(oContent, oXMLElement, bReplaceFlexImages,                        bDoesParaStyleExists);                    bResult = oPlacedResult.placed;                    if (bResult && oPlacedResult.ids) {                      oResult.data.flexTableFrameIds = oResult.data.flexTableFrameIds.concat(oPlacedResult.ids);                    }                  } catch (e) {                    var error = new InDesignError(e);                    e.message = error.getErrorMessage($.CommonService.CLASS_NAME);                    failedContentGeneration.push(sTagName);                    oResult.status = "failure";                  }                  if (oDtpGroupInfo.slotFound && !oResult.data.slotInfo.hasOwnProperty(oDtpGroupInfo.slotId)) {                    var aInstanceFrames = JSON.parse($.ProductTemplateLinkingService.getInstanceFrameTags(oDtpGroupInfo.slotId));                    oResult.data.slotInfo[oDtpGroupInfo.slotId] = [];                    for (var iIndexInstance = 0; iIndexInstance < aInstanceFrames.data.length; iIndexInstance++) {                      var oInstanceFrame = aInstanceFrames.data[iIndexInstance];                      oResult.data.slotInfo[oDtpGroupInfo.slotId].push(oInstanceFrame.placeholderId);                    }                  }                  if (bResult) {                    aSuccessfulContentGeneration.push(sTagName);                  } else {                    failedContentGeneration.push(sTagName);                  }                  numberOfTags--;                  if (!numberOfTags) {                    oResult.data.successfulTags = aSuccessfulContentGeneration;                    oResult.data.failedTags = failedContentGeneration;                    return oResult;                  }                } else {                  var aChildElements = oXMLElement.xmlElements;                  var iChildCount = aChildElements.length;                  while (iChildCount > 0) {                    iChildCount--;                    aXMLElement.push(aChildElements[iChildCount]);                  }                }              }            } else if ($.aGraphicFrameTypes.contains(oPageItem.constructor.name)                && oDtpGroupInfo.slotFound                && oTagsContent.defaultArticleImage                && oDtpGroupInfo.slotId === oTagsContent.defaultArticleImage.slotId){              // Linking Default Article Image on Empty Product Template Frame              try {                var oDefaultArticleImageData = oTagsContent.defaultArticleImage;                if (oPageItem.isValid) {                  bResult = $.CommonService.placeImageOnUnTaggedFrame(oPageItem, oDefaultArticleImageData);                }              } catch (e) {                bResult = false;                var error = new InDesignError(e);                e.message = error.getErrorMessage($.CommonService.CLASS_NAME);                failedContentGeneration.push(sTagName);                oResult.status = "failure";              }            }          }        }      }      oResult.data.successfulTags = aSuccessfulContentGeneration;      oResult.data.failedTags = failedContentGeneration;      return oResult;    } catch (e) {      $.printMessage("??? ERROR: continuePlacingContentInPlaceholders - " + e.message);      var error = new InDesignError(e);      e.message = error.getErrorMessage($.CommonService.CLASS_NAME);      throw e;    } finally {      $.CommonService.setOriginalDocumentPreferences(oActiveDocument, oDocumentPreference);    }  },  /**   * This function is called after any linking and inserts the linking info in the designated frame   * @param oPastedTagsMapInfo   */  insertLinkedInfoInFrames : function (oPastedTagsMapInfo) {    $.printMessage("*** insertLinkedInfoInFrames ***");    var oActiveDocument    = $.CommonService.ACTIVE_DOCUMENT_TEMPLATE;    var sUniqueToken       = $.CommonService.getUniqueTokenPresentInDocument(oActiveDocument);    var aAllPageItems      = oActiveDocument.allPageItems;    var iPageItemCount     = aAllPageItems.length;    for (var iPageItem = 0; iPageItem < iPageItemCount; iPageItem++) {      var oPI = aAllPageItems[iPageItem];      if ($.aFrameTypes.contains(oPI.constructor.name) && oPI.isValid) {        var oFrameXmlElement = oPI.associatedXMLElement;        var aXMLElement = [];        if (oFrameXmlElement) {          aXMLElement.push(oFrameXmlElement);          while (aXMLElement.length > 0) {            var oXMLElement = aXMLElement.pop();            var sXMLElementMarkupTagName = oXMLElement.markupTag.name;            if (oPastedTagsMapInfo.hasOwnProperty(sXMLElementMarkupTagName)) {              $.CommonService.setIndesignIDToFrame(oPI, sUniqueToken);              var oLinkedInfo = oPastedTagsMapInfo[sXMLElementMarkupTagName];              delete oLinkedInfo.placeholderId;              delete oLinkedInfo.placeholderStatusInSync;              var sLinkedInfo = JSON.stringify(oLinkedInfo);              oPI.insertLabel(sXMLElementMarkupTagName, sLinkedInfo);            }            var aChildElements = oXMLElement.xmlElements;            var iChildCount = aChildElements.length;            while (iChildCount > 0) {              iChildCount--;              aXMLElement.push(aChildElements[iChildCount]);            }          }        }      }    }//for - page items    $.printMessage("*** SUCCESS: insertLinkedInfoInFrames ***")  },  getCurrentTimeStamp: function (){    return Date.now().toString();  },  isCSDTPTag: function (tagName) {    return (tagName.indexOf("csdtp") >= 0);  },  getSlotInfo: function (oPageItem) {    var sSlotInfo = oPageItem.extractLabel("slotId");    if (sSlotInfo != "") {      var sSlotInfo = JSON.parse(sSlotInfo);      return {        slotFound: true,        slotId: sSlotInfo.id,        id: sSlotInfo.id,        templateId: sSlotInfo.productTemplateInstanceId,        slotInfo: sSlotInfo      };    }    return {slotFound: false};  },  getUniqueTokenPresentInDocument: function (oDoc) {    //NOTE: In case of DT, token remains saved in document label    var sExistingToken = $.CommonService.extractTokenFromTemplateLabel(oDoc);    if(sExistingToken != ""){      return sExistingToken;    }    //NOTE: In case of IT, token is not saved in document(IDMS), hence extracting from any of the frames    var aAllPageItems = oDoc.allPageItems;    var oFrame = {};    var bFrameFound = false;    for (var iPageItem = 0; iPageItem < aAllPageItems.length; iPageItem++) {      if ($.aFrameTypes.contains(aAllPageItems[iPageItem].constructor.name)) {        oFrame = aAllPageItems[iPageItem];        var bFrameFound = true;        break;      }    }    if (!bFrameFound) {      return "";    }    var sFrameName = oFrame.extractLabel("Name");    if (sFrameName != "") {      var aSplittedFrameName = sFrameName.split($.CommonService.SEPERATOR_TOKEN);      if (aSplittedFrameName.length >= 4) {        return aSplittedFrameName[3];      }    }    return "";  },  /**extractTokenFromTemplateLabel() - Returns the unique token for the given document   * @param oDocument   * @returns {*}   */  extractTokenFromTemplateLabel : function (oDocument) {    var sUniqueToken = oDocument.extractLabel('uniqueToken');    return sUniqueToken;  },  /**Method sets Idsn Id of the frame with unique token to the frame object in a specific format.   *             <documentUniqueToken> + <MetaToken> + <FrameId>   * @param oFrame   * @param sUniqueToken   */  setIndesignIDToFrame: function (oFrame, sUniqueToken) {    var sIdsnId = sUniqueToken + $.CommonService.METATOKEN + oFrame.id;    oFrame.insertLabel($.CommonService.IDSN_ID, sIdsnId);  },  /**Method sets Idsn Id of the frame with unique token to the frame object in a specific format.   *             <documentUniqueToken> + <MetaToken> + <FrameId>   * @param oFrame   * @param sUniqueToken   */  setIndesignIDToFrame: function (oFrame, sUniqueToken) {    var sIdsnId = sUniqueToken + $.CommonService.METATOKEN + oFrame.id;    oFrame.insertLabel($.CommonService.IDSN_ID, sIdsnId);  },  replaceWithNewLine: function (sString) {    sString = sString == null ? "" : sString;    if (sString.indexOf("\r\n") != -1) {      sString = sString.replace(/\r\n/g, "\r");    }    if (sString.indexOf("\n") != -1) {      sString = sString.replace(/\n/g, "\r");    }    if (sString.indexOf("\r") != -1) {      sString = sString.replace(/\r/g, "\r");    }    return sString;  },  placeContents: function (oContent, oXMLElement, bReplaceFlexImages, bDoesParaStyleExists) {    var oResult = {};    var bResult = false;    try {      if (oContent.isLabel || oContent.contentType == "Text-attribute" || oContent.contentType  == "TEXT" ||          (oContent.contentType == "user" && oContent.attributeType == "text")) {        //PLacing text content        oContent.data = $.CommonService.replaceWithNewLine(oContent.data);        if (oContent.isLabel &&            ($.CommonService.tableAttributeTypes.contains(oContent.contentType) ||                $.CommonService.specialAttributeTypes.contains(oContent.contentType))        ) {          oContent.data = decodeURIComponent(oContent.data);        }        if (oXMLElement.pageItems.length == 1) {          //this is a graphic frame which has to be converted to text frame          var oRectangle = oXMLElement.pageItems[0];          oRectangle.contentType = ContentType.TEXT_TYPE;        }        if (oContent.data == "" && oXMLElement.xmlContent.constructor.name == "Text") {          // Case: Content to be placed at inline level is empty. So place "no value" text.          oXMLElement.contents = $.CommonService.EMPTY_CONTENT;          bResult              = false;        } else {          oXMLElement.contents = oContent.data;          bResult              = true;        }      } else if (oContent.contentType == "image") {        //Placing Image content, Need to check for cell, tagged rectangle ,untagged rectangle separately        if (oXMLElement.cells.length == 1) {          //Case when tag is on tagged/untagged table cell          var oCell = oXMLElement.cells[0];          var oResult = $.CommonService.changeCellTypeToGraphicAndPlaceImage(oCell, oContent);          if (oResult.status == "success") {            bResult = true;          } else {            bResult = false;          }        }//TODO:: In the below code we are getting the rectangle frame using xml element. To do the same there are many        // checks added according to the linked image type. We can do the same using (oXMLElement.parentStory.rectangles[0]).        else if (oXMLElement.images.length == 1) {          //Case when tag is on tagged rectangle frame having Image, In this case we get Image from XMLElement          // and we need to find its Parent Frame          var oRectangle = oXMLElement.images[0].parent;          var sMd5HashSource = $.CommonService.getMD5HashOfActiveImage(oContent.imageReferences);          var sMd5HashTarget = oRectangle.extractLabel("md5Hash");          if (sMd5HashSource !== sMd5HashTarget || oContent.data !== oRectangle.images[0].itemLink.filePath) {            $.CommonService.placeContentFromPath(oRectangle, oContent.data);            oRectangle.insertLabel("md5Hash", sMd5HashSource);          }          bResult = true;        }        else if (oXMLElement.epss.length == 1) {          //Case when tag is on tagged rectangle frame having eps(barcode), In this case we get eps from XMLElement          // and we need to find its Parent Frame          var oRectangle = oXMLElement.epss[0].parent;          var sMd5HashSource = $.CommonService.getMD5HashOfActiveImage(oContent.imageReferences);          var sMd5HashTarget = oRectangle.extractLabel("md5Hash");          if (sMd5HashSource !== sMd5HashTarget || oContent.data !== oRectangle.epss[0].itemLink.filePath) {            $.CommonService.placeContentFromPath(oRectangle, oContent.data);            oRectangle.insertLabel("md5Hash", sMd5HashSource);          }          bResult = true;        }        else if (oXMLElement.pdfs.length == 1) {          //Case when tag is on tagged rectangle frame having Pdf, In this case we get pdf from XMLElement          // and we need to find its Parent Frame          var oRectangle = oXMLElement.pdfs[0].parent;          var sMd5HashSource = $.CommonService.getMD5HashOfActiveImage(oContent.imageReferences);          var sMd5HashTarget = oRectangle.extractLabel("md5Hash");          if (sMd5HashSource !== sMd5HashTarget || oContent.data !== oRectangle.pdfs[0].itemLink.filePath) {            $.CommonService.placeContentFromPath(oRectangle, oContent.data);            oRectangle.insertLabel("md5Hash", sMd5HashSource);          }          bResult = true;        }        else if (oXMLElement.pageItems.length == 1) {          //Case when tag is on tagged/untagged rectangle frame not having Image, In this case we get rectangle from XMLElement          var oRectangle = oXMLElement.pageItems[0];          $.CommonService.placeContentFromPath(oRectangle, oContent.data);          var sMd5HashSource = $.CommonService.getMD5HashOfActiveImage(oContent.imageReferences);          oRectangle.insertLabel("md5Hash", sMd5HashSource);          bResult = true;        } else {          //case if the frame is text frame. here we are converting the text frame to graphic frame and then placing the media file          var oFrame;          oFrame = oXMLElement.xmlContent.textContainers[0];          if (oFrame.constructor.name == "TextFrame") {            //changing the frame to graphic frame            oFrame.contents = "";            oFrame.contentType = ContentType.GRAPHIC_TYPE;            //placing image on the oFrame object places image on the text frame and fails in fitting rule            //so extract the oRectangle and then place image            if (oXMLElement.pageItems.length == 1) {              oRectangle = oXMLElement.pageItems[0];              $.CommonService.placeContentFromPath(oRectangle, new File(oContent.data));              var sMd5Hash = $.CommonService.getMD5HashOfActiveImage(oContent.imageReferences);              oRectangle.insertLabel("md5Hash", sMd5Hash);              bResult = true;            }          }        }      } else if ($.CommonService.specialAttributeTypes.contains(oContent.contentType)) {        if (oContent.filePath == "") {          oContent.data = decodeURIComponent(oContent.data);          oContent.data = oContent.data.replace("%!TT", "");          if (oXMLElement.pageItems.length == 1) {            //this is a graphic frame which has to be converted to text frame            var oRectangle         = oXMLElement.pageItems[0];            oRectangle.contentType = ContentType.TEXT_TYPE;          }          if (oContent.data == "" && oXMLElement.xmlContent.constructor.name == "Text") {            // Case: Content to be placed at inline level is empty. So place "no value" text.            oXMLElement.contents = $.CommonService.EMPTY_CONTENT;            bResult              = false;          } else {            oXMLElement.contents = oContent.data;            bResult              = true;          }        } else {          var oFile = new File(oContent.filePath);          if (!oFile.exists) {            if (oXMLElement.xmlContent.constructor.name == "Text") {              // Case: Content to be placed at inline level is empty. So place "no value" text.              oXMLElement.contents = $.CommonService.EMPTY_CONTENT;              bResult              = false;            } else {              oXMLElement.contents = "";              bResult              = true;            }          } else {            //Note: We need to reapply the old styles after placing the file for multiline content            //Step1: Get the original P and C style for the text inside XMLElement            if (!bDoesParaStyleExists) {              var appliedFontSize = oXMLElement.texts[0].pointSize;              var appliedFont = oXMLElement.texts[0].appliedFont;            }            //Step2: Place the content            oXMLElement.contents = "";            $.CommonService.placeContentFromPath(oXMLElement.insertionPoints[0], oContent.filePath);            oFile.remove();            //Step3: Update the new styles with the existing style properties            if (!bDoesParaStyleExists) {              var aParagraphs = oXMLElement.paragraphs;              var iParaCount = 0;              while (aParagraphs[iParaCount].isValid) {                try {                  aParagraphs[iParaCount].pointSize = appliedFontSize;                  aParagraphs[iParaCount].appliedFont = appliedFont;                } catch (e) {                }                iParaCount++;              }            }            bResult = true;          }        }      } else if ($.CommonService.tableAttributeTypes.contains(oContent.contentType) && !bReplaceFlexImages) {        //Note: We need to reapply the old styles after placing the file for multiline content        //Step1: Get the original P and C style for the text inside XMLElement        if (oContent.filePath == "") {          oContent.data = decodeURIComponent(oContent.data);          oContent.data = oContent.data.replace("%!TT", "");          if (oXMLElement.pageItems.length == 1) {            //this is a graphic frame which has to be converted to text frame            var oRectangle         = oXMLElement.pageItems[0];            oRectangle.contentType = ContentType.TEXT_TYPE;          }          if (oContent.data == "" && oXMLElement.xmlContent.constructor.name == "Text") {            // Case: Content to be placed at inline level is empty. So place "no value" text.            oXMLElement.contents = $.CommonService.EMPTY_CONTENT;            bResult              = false;          } else {            oXMLElement.contents = oContent.data;            bResult              = true;          }        } else {          if (!bDoesParaStyleExists) {            var appliedFontSize = oXMLElement.texts[0].pointSize;            var appliedFont = oXMLElement.texts[0].appliedFont;          }          var oFlexContainerTextFrame = oXMLElement.xmlContent.textContainers[0];          oFlexContainerTextFrame.textFramePreferences.autoSizingReferencePoint = AutoSizingReferenceEnum.TOP_LEFT_POINT;          oFlexContainerTextFrame.textFramePreferences.autoSizingType = AutoSizingTypeEnum.HEIGHT_AND_WIDTH;          oFlexContainerTextFrame.parentStory.contents = "";          if (oContent.filePath != "") {            $.CommonService.placeContentFromPath(oFlexContainerTextFrame, oContent.filePath);          }          oFlexContainerTextFrame.insertLabel("contentType", "flexTable");          var aFlexTable = oFlexContainerTextFrame.parentStory.tables[0];          if (aFlexTable.isValid) {            if (oContent.hasOwnProperty("inTagDetails") && oContent.inTagDetails.length) {              oResult.ids = [];              for (var iInTagCount = 0; iInTagCount < oContent.inTagDetails.length; iInTagCount++) {                var iRow = oContent.inTagDetails[iInTagCount].rowNum - 1;                var iCol = oContent.inTagDetails[iInTagCount].colNum - 1;                var iImageHeight = oContent.inTagDetails[iInTagCount].imageHeight;                var oCell = aFlexTable.rows[iRow].cells[iCol];                oCell.convertCellType(CellTypeEnum.GRAPHIC_TYPE_CELL);                oCell.height = iImageHeight;                if (oContent.inTagDetails[iInTagCount].tagsData.CSPath != "" &&                    File(oContent.inTagDetails[iInTagCount].tagsData.CSPath).exists) {                  $.CommonService.placeContentFromPath(oCell.rectangles[0],                      oContent.inTagDetails[iInTagCount].tagsData.CSPath);                  var oActiveImageReference = {};                  var aImageReferences      = oContent.inTagDetails[iInTagCount].tagsData.imageReferences;                  var iImageReferencesCount = aImageReferences.length;                  for (var iReferenceCount = 0; iReferenceCount < iImageReferencesCount; iReferenceCount++) {                    if (aImageReferences[iReferenceCount].isActive) {                      oActiveImageReference = aImageReferences[iReferenceCount];                    }                  }                  oCell.rectangles[0].insertLabel("md5Hash", oActiveImageReference.md5Hash);                  oResult.ids.push(oCell.rectangles[0].id);                }              }            }            bResult = true;            var oFile = new File(oContent.filePath);            oFile.remove();            //Step3: Update the new styles with the existing style properties            if (!bDoesParaStyleExists) {              oXMLElement.texts[0].pointSize = appliedFontSize;              oXMLElement.texts[0].appliedFont = appliedFont;              var aCells = aFlexTable.cells;              var iCellCount = aCells.length;              for (var iCellIndex = 0; iCellIndex < iCellCount; iCellIndex++) {                var aParagraphs = aCells[iCellIndex].paragraphs;                var iParaCount = 0;                while (aParagraphs[iParaCount].isValid) {                  try {                    aParagraphs[iParaCount].pointSize = appliedFontSize;                    aParagraphs[iParaCount].appliedFont = appliedFont;                  } catch (e) {                  }                  iParaCount++;                }              }            }          } else {            bResult = true;          }        }      } else if ($.CommonService.tableAttributeTypes.contains(oContent.contentType) && bReplaceFlexImages) {        if (oContent.hasOwnProperty("inTagDetails") && oContent.inTagDetails.length) {          var oFlexContainerTextFrame = oXMLElement.xmlContent.textContainers[0];          var aFlexTable = oFlexContainerTextFrame.parentStory.tables[0];          if (aFlexTable.isValid) {}          oResult.ids = [];          for (var iInTagCount = 0; iInTagCount < oContent.inTagDetails.length; iInTagCount++) {            var iRow = oContent.inTagDetails[iInTagCount].rowNum - 1;            var iCol = oContent.inTagDetails[iInTagCount].colNum - 1;            var iImageHeight = oContent.inTagDetails[iInTagCount].imageHeight;            var oCell = aFlexTable.rows[iRow].cells[iCol];            oCell.convertCellType(CellTypeEnum.GRAPHIC_TYPE_CELL);            oCell.height = iImageHeight;            if (oContent.inTagDetails[iInTagCount].tagsData.CSPath != "" &&                File(oContent.inTagDetails[iInTagCount].tagsData.CSPath).exists) {              $.CommonService.placeContentFromPath(oCell.rectangles[0],                  oContent.inTagDetails[iInTagCount].tagsData.CSPath);              var oActiveImageReference = {};              var aImageReferences      = oContent.inTagDetails[iInTagCount].tagsData.imageReferences;              var iImageReferencesCount = aImageReferences.length;              for (var iReferenceCount = 0; iReferenceCount < iImageReferencesCount; iReferenceCount++) {                if (aImageReferences[iReferenceCount].isActive) {                  oActiveImageReference = aImageReferences[iReferenceCount];                }              }              oCell.rectangles[0].insertLabel("md5Hash", oActiveImageReference.md5Hash);              oResult.ids.push(oCell.rectangles[0].id);            }          }        }        bResult = true;      }      oResult.placed = bResult;      return oResult;    } catch (e) {      $.printMessage("??? ERROR PlaceContent-" + e.message);      var error = new InDesignError(e);      e.message = error.getErrorMessage($.CommonService.CLASS_NAME);      throw e;    }  },  /**   * Creates Currently Linked TagInfo Object from Document meta Info and Dtp Frames Label.   * @param oDocument   */  createLinkedTagInfoFromDocument: function (oDocument) {    var oCurrentlyLinkedTagInfo = {};    var aAllPageItems           = oDocument.allPageItems;    LoopOnPageItems: for (var iPageItem = 0; iPageItem < aAllPageItems.length; iPageItem++) {      var oPageItem = aAllPageItems[iPageItem];      if (oPageItem.isValid && $.aFrameTypes.contains(oPageItem.constructor.name)) {        // Skip Linking information for page items on master spread.        if (oPageItem.parentPage && oPageItem.parentPage.parent.constructor.name == "MasterSpread") {          continue;        } else if (!oPageItem.parentPage) {          var oParent = oPageItem.parent;          while (oParent.isValid) {            if (oParent.constructor.name == "MasterSpread") {              continue LoopOnPageItems;            } else if (oParent.constructor.name == "Spread") {              break;            }            oParent = oParent.parent;          }        }        var aCustomTagObjects = $.CommonService.getAllTagsOfFrame(oPageItem, "customTagObjects");        var oDTPGroupInfo = $.CommonService.getSlotInfo(oPageItem);        if (oDTPGroupInfo.slotFound && !oCurrentlyLinkedTagInfo.hasOwnProperty(oDTPGroupInfo.slotId)) {          oCurrentlyLinkedTagInfo[oDTPGroupInfo.slotId] = oDTPGroupInfo.slotInfo;        }        for (var iTagItem = 0; iTagItem < aCustomTagObjects.length; iTagItem++) {          var oCustomTag  = aCustomTagObjects[iTagItem];          var sTagInfo = oPageItem.extractLabel(oCustomTag.placeholderId);          var oTagInfo = JSON.parse(sTagInfo);          oCurrentlyLinkedTagInfo[oCustomTag.placeholderId] = oTagInfo;          if (oDTPGroupInfo.slotFound) {            oCurrentlyLinkedTagInfo[oCustomTag.placeholderId].slotId = oDTPGroupInfo.slotId;            if (oCurrentlyLinkedTagInfo[oCustomTag.placeholderId].hasOwnProperty("linkedEntityId") &&                oCurrentlyLinkedTagInfo[oCustomTag.placeholderId].linkedEntityId &&                !oCurrentlyLinkedTagInfo[oDTPGroupInfo.slotId].linkedEntityId) {              //if current tag has cs object linked and dtpgroup in currently linked tag info do not have that              //product info then insert it              oCurrentlyLinkedTagInfo[oDTPGroupInfo.slotId].linkedEntityId =                  oCurrentlyLinkedTagInfo[oCustomTag.placeholderId].linkedEntityId;            }          } else {            delete oCurrentlyLinkedTagInfo[oCustomTag.placeholderId].slotId;            oPageItem.insertLabel(oCustomTag.placeholderId, JSON.stringify(oCurrentlyLinkedTagInfo[oCustomTag.placeholderId]));          }          oCurrentlyLinkedTagInfo[oCustomTag.placeholderId].placeholderId = oCustomTag.placeholderId;        }//for tagItems      }    }//for pageItems    return oCurrentlyLinkedTagInfo;  },  getIDSNDocumentByMamFileId: function (sMamFileId) {    $.printMessage("*** getIDSNDocumentByMamFileId ***");    var oResult = {};    oResult.docFound = false;    var iDocCount = app.documents.length;    $.printMessage("*** open documents count -"+ iDocCount);    while (iDocCount > 0) {      iDocCount--;      var oTraversedDoc = app.documents[iDocCount];      if (!oTraversedDoc.isValid) {        continue;      }      var sTraversedDocMamId = oTraversedDoc.extractLabel("templateId");      $.printMessage("*** Extracted document id -"+ sTraversedDocMamId);      $.printMessage("*** sMamFileId -"+ sMamFileId);      if (sTraversedDocMamId == sMamFileId) {        oResult.docFound = true;        oResult.doc = oTraversedDoc;        break;      }    }    return oResult;  },  generatePagePreviewUsingPlugin: function (oDocument, sDocumentName, sDirectoryAbsPath) {    var sPreviewCachePath = sDirectoryAbsPath + "_Previews";    var previewFolder = new Folder(sPreviewCachePath);    if (!previewFolder.exists) {      previewFolder.create();    }/*    var xmlPrefs = app.xmlViewPreferences;    var oXMLTagMarkerPref = xmlPrefs.showTagMarkers;    var oXMLTaggedFramesPref = xmlPrefs.showTaggedFrames;    if (oXMLTagMarkerPref) {      xmlPrefs.showTagMarkers = false;    }    if (oXMLTaggedFramesPref) {      xmlPrefs.showTaggedFrames = false;    }*/    var iPageCount        = oDocument.pages.length;    var aPagePreviewPaths = [];    for (var iPageIndex = 0; iPageIndex < iPageCount; iPageIndex++) {      var sFilePath = sPreviewCachePath + "/" + "page" + "/" + oDocument.pages[iPageIndex].id + "/" +          oDocument.pages[iPageIndex].id + ".300.0.low.jpg";      var oOldFile  = new File(sFilePath);      oOldFile.remove();      aPagePreviewPaths.push(sFilePath);    }    oDocument.getJpg(sPreviewCachePath, "all", 300, false, "", "_" + "low");    app.generalPreferences.includePreview = true;    app.generalPreferences.previewPages = PreviewPagesOptions.ALL_PAGES;    app.generalPreferences.previewSize = PreviewSizeOptions.EXTRA_LARGE; /*   if (oXMLTagMarkerPref) {      xmlPrefs.showTagMarkers = true;    }    if (oXMLTaggedFramesPref) {      xmlPrefs.showTaggedFrames = true;    }*/    var aNewPagePreviewPaths = [];    for (var iPageIndex = 0; iPageIndex < iPageCount; iPageIndex++) {      var sFilePath = sPreviewCachePath + "/" + "page" + "/" + oDocument.pages[iPageIndex].id + "/" +          oDocument.pages[iPageIndex].id + ".300.0.low.jpg";      var oFile  = new File(sFilePath);      var oExistingFile  = new File(sPreviewCachePath + "/" + "page" + "/" + oDocument.pages[iPageIndex].id + "/" + "__DTPPreview__" + iPageIndex + ".jpg");      if (oExistingFile.exists) {        oExistingFile.remove();      }      oFile.rename("__DTPPreview__" + iPageIndex + ".jpg");      aNewPagePreviewPaths.push(sPreviewCachePath + "/" + "page" + "/" + oDocument.pages[iPageIndex].id + "/" +"__DTPPreview__" + iPageIndex + ".jpg");    }    return aNewPagePreviewPaths;  },  getPreviewInfoOfDocument: function (oDocument) {    var oSpreadReferences = {};    var oDocPageNames     = {};    var iPageName         = 1;    var iTotalPages       = 0;    var aSpreads          = oDocument.spreads;    var iSpreadCount      = aSpreads.length;    for (var iSpreadIndex = 0; iSpreadIndex < iSpreadCount; iSpreadIndex++) {      var aPages     = aSpreads[iSpreadIndex].pages;      var iPageCount = aPages.length;      var aPageIDs   = [];      for (var iPageIndex = 0; iPageIndex < iPageCount; iPageIndex++) {        iTotalPages++;        aPageIDs.push(aPages[iPageIndex].id);        oDocPageNames[aPages[iPageIndex].id] = iPageName++;      }      oSpreadReferences[aSpreads[iSpreadIndex].id] = aPageIDs;    }    var oPreviewInfoOfDocument              = {};    oPreviewInfoOfDocument.spreadReferences = oSpreadReferences;    oPreviewInfoOfDocument.docPageNames     = oDocPageNames;    oPreviewInfoOfDocument.pageCount        = iTotalPages;    return oPreviewInfoOfDocument;  },  /**   * Inserts dtp Group info in item template instance frames   * @param sFrameIds   * @param sDtpGroupTagInfo   */  insertDtpGroupInfoInFrames : function (sFrameIds, sDtpGroupTagInfo, oActiveDocument) {    var aAllPageItems      = oActiveDocument.allPageItems;    var iPageItemCount     = aAllPageItems.length;    var aFrameIds          = JSON.parse(sFrameIds);    var oFramesToSelect    = [];    var numberOfInstanceFrames = aFrameIds.length;    for (var iPageItem = 0; iPageItem < iPageItemCount; iPageItem++) {      var oPI = aAllPageItems[iPageItem];      if (aFrameIds.contains(oPI.id)) {        var oDTPGroupInfo = JSON.parse(sDtpGroupTagInfo);        if (oDTPGroupInfo.slotId) {          oDTPGroupInfo.slotId = oDTPGroupInfo.id;        } else if (oDTPGroupInfo.id) {          oDTPGroupInfo.slotId = oDTPGroupInfo.id;        }        sDtpGroupTagInfo = JSON.stringify(oDTPGroupInfo);        oPI.insertLabel("slotId", sDtpGroupTagInfo);        numberOfInstanceFrames--;        if (!$.aImageTypes.contains(oPI.constructor.name) && oPI.extractLabel('isInsideCell') != 'true') {          oFramesToSelect.push(oPI);        }      }      if (!numberOfInstanceFrames) {        break;      }    }  },  insertDtpGroupInfoInFramesUsingActionModel: function (aActionModels, oDocument) {    $.printMessage("*** >> CURRENT ACTION MODEL  >>" + JSON.stringify(aActionModels));    for (var i = 0; i < aActionModels.length; i++) {      var oActionModel = aActionModels[i];      $.printMessage("*** >> CURRENT ACTION MODEL  >>" + JSON.stringify(oActionModel));      var oPlannedSlot = oActionModel.productTemplateAndLinkingInformation.plannedSlot;      switch (oActionModel.action) {          /* case ADD_ARTICLE:           case MODIFY_ARTICLE:             oPlacedSlot.linkedEntityId = oActionModel.linkedEntityId;             oPlacedSlot.linkedEntityBaseType = oActionModel.linkedEntityBaseType;             oPlacedSlots[sSlotId].linkedEntityId = oActionModel.linkedEntityId;             oPlacedSlots[sSlotId].linkedEntityBaseType = oActionModel.linkedEntityBaseType;             oCommonInteractor = new CommonInteractor(this);             oCommonInteractor.delegate = new CSInteractorDelegateProxy(                 this.linkDefaultArticleImageOnGraphicFramesOfPT.bind(this, oDataForDefaultImageLinking[sSlotId]), this);             oCommonInteractor.insertDtpGroupInfoInFrames(JSON.stringify(oActionModel.frameIds), JSON.stringify(oPlacedSlot));             break; */        case $.Constants.ADD_PRODUCT_TEMPLATE:        case $.Constants.ADD_PRODUCT_TEMPLATE_ADD_ARTICLE:        case $.Constants.ADD_PRODUCT_TEMPLATE_MODIFY_ARTICLE:        case $.Constants.ADD_PRODUCT_TEMPLATE_DELETE_ARTICLE:          //Adding New Linked infor for template3 to linked info          /* if (oActionModel.linkedInfo) {             $.extend(oCurrentlyLinkedTagInfo, oActionModel.linkedInfo);           }           //Create or update Placed slot in currentlyLinkedTagInfo           if (oPlacedSlot) {             oPlacedSlot[PRODUCT_TEMPLATE_INSTANCE_ID] = oActionModel.productTemplateInstanceId;             if (_.isEmpty(oPlacedSlots[sSlotId])) {               oPlacedSlots[sSlotId] = $.extend({}, oPlannedSlot);             }           } else {             oCurrentlyLinkedTagInfo[sSlotId] = $.extend({}, oPlannedSlot);             oPlacedSlot = oCurrentlyLinkedTagInfo[sSlotId];             oPlacedSlots[sSlotId] = $.extend({}, oPlannedSlot);           }           if ([ADD_PRODUCT_TEMPLATE_ADD_ARTICLE, ADD_PRODUCT_TEMPLATE_MODIFY_ARTICLE].indexOf(oActionModel.action) >= 0) {             oPlacedSlot.linkedEntityId = oActionModel.linkedEntityId;             oPlacedSlot.linkedEntityBaseType = oActionModel.linkedEntityBaseType;             oPlacedSlots[sSlotId].linkedEntityId = oActionModel.linkedEntityId;             oPlacedSlots[sSlotId].linkedEntityBaseType = oActionModel.linkedEntityBaseType;           } else if ([ADD_PRODUCT_TEMPLATE, ADD_PRODUCT_TEMPLATE_DELETE_ARTICLE].indexOf(oActionModel.action) >= 0) {             oPlacedSlot.linkedEntityId = "";             oPlacedSlot.linkedEntityBaseType = oActionModel.linkedEntityBaseType;             oPlacedSlots[sSlotId].linkedEntityId = "";             oPlacedSlots[sSlotId].linkedEntityBaseType = oActionModel.linkedEntityBaseType;           }           //Update Product Template Dimensions in Placed slot as well as "PLANNED SLOT"           oPlacedSlot[PRODUCT_TEMPLATE_DIMENSIONS] = {};           oPlacedSlot[PRODUCT_TEMPLATE_DIMENSIONS][TOP_LEFT_X_COORDINATE] = oPlannedSlot[ABSOLUTE_SLOT_DIMENSION][TOP_LEFT_X_COORDINATE];           oPlacedSlot[PRODUCT_TEMPLATE_DIMENSIONS][TOP_LEFT_Y_COORDINATE] = oPlannedSlot[ABSOLUTE_SLOT_DIMENSION][TOP_LEFT_Y_COORDINATE];           oPlacedSlot[PRODUCT_TEMPLATE_DIMENSIONS][HEIGHT] = oActionModel.productTemplateAndLinkingInformation.instance.dimensions.height;           oPlacedSlot[PRODUCT_TEMPLATE_DIMENSIONS][WIDTH] = oActionModel.productTemplateAndLinkingInformation.instance.dimensions.width;           oPlacedSlot.pageIndex = oPlannedSlot.pageIndex;           oPlacedSlot.id    = oPlannedSlot.id;           oPlannedSlot[PRODUCT_TEMPLATE_DIMENSIONS] = oPlacedSlot[PRODUCT_TEMPLATE_DIMENSIONS];           oPlacedSlots[sSlotId] = oPlacedSlot;*/          /*  oCommonInteractor = new CommonInteractor(this);            oCommonInteractor.delegate = new CSInteractorDelegateProxy(                this.linkDefaultArticleImageOnGraphicFramesOfPT.bind(this, oDataForDefaultImageLinking[sSlotId]), this);*/          $.CommonService.insertDtpGroupInfoInFrames(JSON.stringify(oActionModel.frameIds), JSON.stringify(oPlannedSlot), oDocument);          break;/*          case DELETE_ARTICLE:            oPlacedSlot.linkedEntityId = "";            oPlacedSlot.linkedEntityBaseType = "";            oPlacedSlots[sSlotId].linkedEntityId = "";            oPlacedSlots[sSlotId].linkedEntityBaseType = "";            break;          case DELETE_PRODUCT_TEMPLATE:            oPlacedSlot.productTemplateInstanceId = "";            oPlacedSlots[sSlotId].productTemplateInstanceId = "";            break;          case DELETE_PRODUCT_TEMPLATE_DELETE_ARTICLE:            oPlacedSlot.linkedEntityId = "";            oPlacedSlot.linkedEntityBaseType = "";            oPlacedSlot.productTemplateInstanceId = "";            oPlacedSlots[sSlotId].linkedEntityId = "";            oPlacedSlots[sSlotId].linkedEntityBaseType = "";            oPlacedSlots[sSlotId].productTemplateInstanceId = "";            break;*/      }    }  },  /**getAllTagsOfFrame() - returns the object of frame tags(including inline tables etc) as needed, based on the input   * parameter   * @param oFrame - Text frame whose tags are to be returned   * @param sRequiredReturnFormat - Format in which tag object is needed:   *                                1. 'indesignTagObjects' - will return the Indesign markup tag objects array   *                                2. 'customTagObjects' - will return a detailed tag object array with custom information   *                                3. 'arrayOfTagNames' - will return array of tag names only   *                                added for each tag.   * @returns {*}   */  getAllTagsOfFrame: function (oFrame, sRequiredReturnFormat) {    try {      var aIndesignXMLTagObjects = [];      var aCustomTagObjects      = [];      var aTagNames              = [];      var oXMLElement            = oFrame.associatedXMLElement;      var sLayerName             = oFrame.itemLayer.name;      if (!oXMLElement) {        return [];      }      if ($.CommonService.isCSDTPTag(oXMLElement.markupTag.name)) {        if (sRequiredReturnFormat == "arrayOfTagNames") {          aTagNames.push(oXMLElement.markupTag.name);        } else if (sRequiredReturnFormat == "customTagObjects") {          var oTagDetailed           = {};          oTagDetailed.placeholderId = oXMLElement.markupTag.name;          oTagDetailed.layerName     = sLayerName;          if (oFrame.constructor.name == "TextFrame" && oFrame.parentStory.tables.length == 1) {            oTagDetailed.placeholderType = "tableFrame";          } else {            oTagDetailed.placeholderType = "frame";          }          aCustomTagObjects.push(oTagDetailed);        } else if (sRequiredReturnFormat == "mixArray") {          aTagNames.push(oXMLElement.markupTag.name);          var oTagDetailed           = {};          oTagDetailed.placeholderId = oXMLElement.markupTag.name;          oTagDetailed.layerName     = sLayerName;          if (oFrame.constructor.name == "TextFrame" && oFrame.parentStory.tables.length == 1) {            oTagDetailed.placeholderType = "tableFrame";          } else {            oTagDetailed.placeholderType = "frame";          }          aCustomTagObjects.push(oTagDetailed);        } else {          aIndesignXMLTagObjects.push(oXMLElement.markupTag);        }      }      if (oFrame.constructor.name == "TextFrame" && oFrame.parentStory.tables.length == 1 &&          (!$.CommonService.isCSDTPTag(oXMLElement.markupTag.name) || oFrame.extractLabel("contentType") == "flexTable")) {        if (sRequiredReturnFormat == "arrayOfTagNames") {          aTagNames = aTagNames.concat($.CommonService.getTableTags(oFrame, "tagNames"));        } else if (sRequiredReturnFormat == "customTagObjects") {          aCustomTagObjects = aCustomTagObjects.concat($.CommonService.getTableTags(oFrame, "customTagObjects"));        } else if (sRequiredReturnFormat == "mixArray") {          aTagNames = aTagNames.concat($.CommonService.getTableTags(oFrame, "tagNames"));          aCustomTagObjects = aCustomTagObjects.concat($.CommonService.getTableTags(oFrame, "customTagObjects"));        } else {          oXMLElement.markupTag.insertLabel("placeholderType", $.CommonService.tagLevelTableFrame);          aIndesignXMLTagObjects.push(oXMLElement.markupTag);          aIndesignXMLTagObjects = aIndesignXMLTagObjects.concat($.CommonService.getTableTags(oFrame, "indesignTagObjects"));        }      }      else if (oFrame.constructor.name == "TextFrame" && oFrame.parentStory.tables.length != 1          && !$.CommonService.isCSDTPTag(oXMLElement.markupTag.name)) {        //No CSDTP tag on frame, one case possible: 1. Frame may contain inline tags        var aFrameInlineXMLElements = oXMLElement.xmlElements;        for (var j = 0; j < aFrameInlineXMLElements.length; j++) {          if ($.CommonService.isCSDTPTag(aFrameInlineXMLElements[j].markupTag.name)) {            if (sRequiredReturnFormat == "arrayOfTagNames") {              aTagNames.push(aFrameInlineXMLElements[j].markupTag.name);            } else if (sRequiredReturnFormat == "customTagObjects") {              var oTagDetailed = {};              oTagDetailed.placeholderId   = aFrameInlineXMLElements[j].markupTag.name;              oTagDetailed.placeholderType = "frameInline";              oTagDetailed.layerName       = sLayerName;              if (!aCustomTagObjects.contains(oTagDetailed)) {                aCustomTagObjects.push(oTagDetailed);              }            } else if (sRequiredReturnFormat == "mixArray") {              aTagNames.push(aFrameInlineXMLElements[j].markupTag.name);              var oTagDetailed = {};              oTagDetailed.placeholderId   = aFrameInlineXMLElements[j].markupTag.name;              oTagDetailed.placeholderType = "frameInline";              oTagDetailed.layerName       = sLayerName;              if (!aCustomTagObjects.contains(oTagDetailed)) {                aCustomTagObjects.push(oTagDetailed);              }            } else {              if (!aIndesignXMLTagObjects.contains(aFrameInlineXMLElements[j].markupTag)) {                aIndesignXMLTagObjects.push(aFrameInlineXMLElements[j].markupTag);              }            }          }        }      }      if (sRequiredReturnFormat == "arrayOfTagNames") {        return aTagNames;      } else if (sRequiredReturnFormat == "indesignTagObjects") {        return aIndesignXMLTagObjects;      } else if (sRequiredReturnFormat == "customTagObjects") {        return aCustomTagObjects;      } else if (sRequiredReturnFormat == "mixArray") {        return {          arrayofTagNames : aTagNames,          customTagObjects : aCustomTagObjects        }      } else {        return [];      }    } catch (e) {      throw e;    }  },  getTableTags: function (oFrame, sRequiredReturnFormat) {    try {      var oTable                   = oFrame.parentStory.tables[0];      var sLayerName               = oFrame.itemLayer.name;      var cells                    = oTable.cells;      var aTableIndesignTagObjects = [];      var aTableTagNames           = [];      var aTableCustomTagObjects   = [];      for (var i = 0; i < cells.length; i++) {        var cell               = cells[i];        var selectedXMLElement = cell.associatedXMLElement;        if (!selectedXMLElement)          continue;        var sCellXMLTagName = selectedXMLElement.markupTag.name;        var sFrameName      = oFrame.extractLabel("Name");        if (!$.CommonService.isCSDTPTag(sCellXMLTagName)) {          // check and store cell inline level XML tags name          if (cell.cellType == CellTypeEnum.GRAPHIC_TYPE_CELL) {            var oRectangle = cell.rectangles[0];            if (oRectangle.associatedXMLElement) {              var oTagDetailed = {};              oTagDetailed.placeholderId   = oRectangle.associatedXMLElement.markupTag.name;              oTagDetailed.layerName       = sLayerName;              oTagDetailed.placeholderType = 'frame';              aTableTagNames.push(oRectangle.associatedXMLElement.markupTag.name);              aTableIndesignTagObjects.push(oRectangle.associatedXMLElement.markupTag);              aTableCustomTagObjects.push(oTagDetailed);            }          } else {            var aCellInlineXMLElements = selectedXMLElement.xmlElements;            if (aCellInlineXMLElements != null) {              for (var j = 0; j < aCellInlineXMLElements.length; j++) {                if ($.CommonService.isCSDTPTag(aCellInlineXMLElements[j].markupTag.name)) {                  aCellInlineXMLElements[j].markupTag.insertLabel('tagUnderElement', sFrameName +                      $.CommonService.SEPERATOR_TOKEN + cell.name);                  aCellInlineXMLElements[j].markupTag.insertLabel("placeholderType", $.CommonService.tagLevelCellInline);                  aTableIndesignTagObjects.push(aCellInlineXMLElements[j].markupTag);                  aTableTagNames.push(aCellInlineXMLElements[j].markupTag.name);                  var oTagDetailed = {};                  oTagDetailed.placeholderId   = aCellInlineXMLElements[j].markupTag.name;                  oTagDetailed.layerName       = sLayerName;                  oTagDetailed.placeholderType = 'cellInline';                  aTableCustomTagObjects.push(oTagDetailed);                }              }            }          }        } else {          //store for cell level XML tag name          selectedXMLElement.markupTag.insertLabel('tagUnderElement', sFrameName + $.CommonService.SEPERATOR_TOKEN + cell.name);          selectedXMLElement.markupTag.insertLabel("placeholderType", $.CommonService.tagLevelCell);          aTableIndesignTagObjects.push(selectedXMLElement.markupTag);          aTableTagNames.push(selectedXMLElement.markupTag.name);          var oTagDetailed = {};          oTagDetailed.placeholderId   = selectedXMLElement.markupTag.name;          oTagDetailed.layerName       = sLayerName;          oTagDetailed.placeholderType = 'cell';          aTableCustomTagObjects.push(oTagDetailed);        }      }      if (sRequiredReturnFormat == 'tagNames') {        return aTableTagNames;      } else if (sRequiredReturnFormat == 'indesignTagObjects') {        return aTableIndesignTagObjects;      } else if (sRequiredReturnFormat == 'customTagObjects') {        return aTableCustomTagObjects;      } else {        return [];      }    } catch (e) {      throw e;    }  },}//----------------END Commonservice.jsx-------------------//////////////////////////////////////////////////////////////////////-----------   PRODUCT TEMPLATE LINKING SERVICE .jsx ------------////////////////////////////////////////////////////////////////////$.aFrameTypes = ["TextFrame", "Rectangle", "TextFrame", "Oval"];$.aImageTypes = ["Image", "PDF", "EPS"];$.sItemTypes = ["XMLTag"];$.ProductTemplateLinkingService = {  CLASS_NAME: 'ProductTemplateLinkingService',  createItemTemplateLink: function (sTemplateId, sItemTemplatePath) {    return JSON.stringify($.ProductTemplateLinkingService.createItemTemplateLinkInternal(sTemplateId, sItemTemplatePath));  },  /** createItemTemplateLinkInternal() this function is called to place an item template instance at the parking position.   The following tasks are performed:   1. validate the selection for text Frame   2. the selection is not > 1.   3. Placing of idms consists of;   b. Rename tag name for the ITIFs   c. Remove the parking position.   d. return the Tags result in form of added/updated/removed.   * */  createItemTemplateLinkInternal: function (sTemplateId, sItemTemplatePath, sSlotId, oSlot) {    //NOTE: Do not remove any commented code from this function, these are not removed for future references    $.printMessage("*** createItemTemplateLinkInternal ***");    var oActiveDocument = null;    var oDocumentPreference = null;    var oResult = {};    try {      oActiveDocument = $.CommonService.ACTIVE_DOCUMENT_TEMPLATE;      //Note: We need to store the frame dimensions in the DTP database as 'points' (for future use), but need to make      // sure that user is allowed to choose any measurement unit while working in the client      oDocumentPreference = $.CommonService.getOriginalDocumentPreferences(oActiveDocument);      $.CommonService.setDocumentPreferencesToPoints(oActiveDocument);      var sUniqueToken = oActiveDocument.extractLabel('uniqueToken');      if (sUniqueToken == "") {        sUniqueToken = $.CommonService.convertToDtpDocument(oActiveDocument);      }      // if (sSlotId) {      //   // case: Replace existing slot frames with new Product Template frames.      //   var oSelection = $.CommonService.deleteOTFramesAndCreateNewOne(oActiveDocument, sSlotId);      // } else {      // }      var oSelection;      var oParentSpread = null;      if (!oSlot) {        $.printMessage("Slot with slot ID-" + sSlotId + "is empty");      } else {        oParentSpread = oActiveDocument.pages[oSlot.pageIndex].parent;      }      var sParkingPositionXMLTagName = "";      if (oSelection && oSelection.associatedXMLElement) {        sParkingPositionXMLTagName = oSelection.associatedXMLElement.markupTag.name;        oSelection.parentStory.contents = "";      }      var x;      var y;      if (oSlot) {        x = oSlot.absoluteSlotDimensions.topLeftXCoordinate;        y = oSlot.absoluteSlotDimensions.topLeftYCoordinate;      } else {        $.printMessage("Slot with slot ID-" + sSlotId + "is empty");      }      //NOTE: In case IDMS contains graphic frames, place() method does not return the placed graphic frame      // (InDesign-bug)      //To handle that situation, we need to store all frame names in page prior to placing IDMS      var aFrameUniqueIDInPageBeforePlacing = $.CommonService.getAllFramesUniqueIDInPage(oParentSpread);      // place the idms at the calculated position      //Note : Should remove co-ordinates with respect to spread and place on spread, not page      //oActiveDocument.setDocumentObserverStateDTP("false");      //Page.place (fileName: File , placePoint:Array of Measurement Unit (Number or String), destinationLayer: Layer , showingOptions: Boolean , autoflowing: Boolean , withProperties: Object ):Array of varies      if (oSlot) {        var oPage = oActiveDocument.pages[oSlot.pageIndex];        $.CommonService.placeContentFromPath(oPage, File(sItemTemplatePath), [x, y]);        $.printMessage("*** Placed Successful ***");        $.printMessage("*** Document name - " + oActiveDocument.name);        $.printMessage("*** NO OF DOCUMENTS OPENED - " + app.documents.length);        if (oActiveDocument.modified) {          $.printMessage("*** Document name - " + oActiveDocument.name + " is modified-");          //oActiveDocument = app.documents[0].save();          oActiveDocument = oActiveDocument.save($.CommonService.DOCUMENT_TEMPLATE_DIRECTORY+"/"+$.CommonService.DOCUMENT_TEMPLATE_NAME+".indd");        }      } else {        $.printMessage("??? ERROR slot not found for placing ???");      }      // the below check is to get the framesAsset info      var framesInAsset = $.ProductTemplateLinkingService.getNewlyPlacedFrameOnPage(aFrameUniqueIDInPageBeforePlacing, oParentSpread);      $.printMessage("Newly placed frames - " + framesInAsset.length);      //This is unique group identifier which will be inserted in the frame label of all the frames of the placed OT      // instance; each placed instance will have a unique ID and color      var oColor = $.CommonService.getARandomColorForTag();      var aFrameIds = [];      var aGroupItemsMovedToLayers = [];      for (var i = 0; i < framesInAsset.length; i++) {        var oPageItem = framesInAsset[i];        aFrameIds.push(oPageItem.id);        //write the color in every pageItem of the dtpGroup to use in merge and other scenario        oPageItem.insertLabel($.CommonService.IDSN_ID, sUniqueToken + $.CommonService.METATOKEN + oPageItem.id);        oPageItem.insertLabel('cRED', oColor[0].toString());        oPageItem.insertLabel('cGREEN', oColor[1].toString());        oPageItem.insertLabel('cBLUE', oColor[2].toString());        //set color of all tags inside pageItem        $.CommonService.createAndSetNewParentTags(oPageItem, oColor);        if (oPageItem.constructor.name == "Group" && !aGroupItemsMovedToLayers.contains(oPageItem.id)) {          var aPageItemsForGroup = oPageItem.allPageItems;          var iNumberOfPIForGroup = aPageItemsForGroup.length;          for (var iPageItemCount = 0; iPageItemCount < iNumberOfPIForGroup; iPageItemCount++) {            aGroupItemsMovedToLayers.push(aPageItemsForGroup[iPageItemCount].id);          }        }        //Moving the frames to the matching layer in master document        if (!$.aImageTypes.contains(oPageItem.constructor.name) &&            oPageItem.parent.constructor.name != "Cell" &&            !aGroupItemsMovedToLayers.contains(oPageItem.id)) {          var sLayerName = oPageItem.extractLabel('LayerName');          var iNoOfLayers = oActiveDocument.layers.length;          for (var iLayer = 0; iLayer < iNoOfLayers; iLayer++) {            if (oActiveDocument.layers[iLayer].name == sLayerName) {              oPageItem.itemLayer = oActiveDocument.layers.item(sLayerName);              break;            }          }        }        if ($.aFrameTypes.contains(oPageItem.constructor.name)) {          var sInstanceFrameName = $.DocumentTemplateService.regenerateLabel(sUniqueToken, oPageItem);          oPageItem.insertLabel("Name", sInstanceFrameName);          var aTextFrameTags = $.DocumentTemplateService.getAllTagsOfFrame(oPageItem);          if (aTextFrameTags.length) {            var aRenamedTags = $.CommonService.renameTagsWithCopiedFromInfo(sUniqueToken, aTextFrameTags, oPageItem);            $.ProductTemplateLinkingService.pushCopiedTagsToAddedTags(aRenamedTags);          }        }      }// for - framesInAsset      // oActiveDocument.setDocumentObserverStateDTP("true");      oResult.data = {};      oResult.data.slotInfo = {};      oResult.data.slotInfo.id = sSlotId;      oResult.data.frameIds = aFrameIds;      oResult.data.addedTags = $.SimpleFrameLinkingService.addedTags;      oResult.data.parkingPostitionXMLTagName = sParkingPositionXMLTagName;      // Set docConverted property of result to true if linking has occurred for first time on external document.      if (oActiveDocument.extractLabel('docConverted') == 'true') {        oResult.data.convertedDocDetails = JSON.parse($.DocumentTemplateService.getActiveDocDetailsForUpload(oActiveDocument)).data;        oActiveDocument.insertLabel('docConverted', 'false');        oResult.data.docConverted = true;      }      $.SimpleFrameLinkingService.addedTags = [];      $.SimpleFrameLinkingService.removedTags = [];      $.SimpleFrameLinkingService.updatedTags = [];      $.CommonService.setOriginalDocumentPreferences(oActiveDocument, oDocumentPreference);      // oResult.data.selectionData = $.CommonService.getActiveSelectionObjectFromPlugin();      oResult.status = "success";      $.printMessage("*** SUCCESS createItemTemplateLinkInternal ***");    } catch (e) {      var error = new InDesignError(e);      $.CommonService.setOriginalDocumentPreferences(oActiveDocument, oDocumentPreference);      oResult.status = "failure";      oResult.message = error.getErrorMessage($.ProductTemplateLinkingService.CLASS_NAME);      $.printMessage("??? ERROR CreateItemTemplateLinkInternal - " + oResult.message);    }    return oResult;  },  getTagInstancesFromFrame: function (sSlotId) {    var oResult = {};    try {      var oActiveDoc = $.CommonService.ACTIVE_DOCUMENT_TEMPLATE;      var aFrames = oActiveDoc.allPageItems;      //TODO: check if unique token is empty and use function to write unique token on each frame or something      var sUniqueToken = oActiveDoc.extractLabel("uniqueToken");      var aInstanceFrameTagObj = [];      for (var iFrameCount = 0; iFrameCount < aFrames.length; iFrameCount++) {        var oFrame = aFrames[iFrameCount];        if ($.aFrameTypes.contains(oFrame.constructor.name)) {          var oDtpGroupInfo = $.CommonService.getSlotInfo(oFrame);          if (oDtpGroupInfo.slotFound && oDtpGroupInfo.slotId == sSlotId) {            aInstanceFrameTagObj =                aInstanceFrameTagObj.concat($.CommonService.getAllTagsOfFrame(oFrame, 'customTagObjects'));          }        }      }      oResult.data = aInstanceFrameTagObj;      oResult.status = 'success';      return oResult;    } catch (e) {      var error = new InDesignError(e);      oResult.status = 'failure';      oResult.message = error.getErrorMessage($.ProductTemplateLinkingService.CLASS_NAME);      return oResult;    }  },  /**getInstanceFrameTags() - Gets all the tags of placed IDMS   * @returns {*}   */  getInstanceFrameTags: function (sDtpGroupId) {    var oResult = this.getTagInstancesFromFrame(sDtpGroupId);    return JSON.stringify(oResult);  },  /**   * This function returns all the tag name from all groups on the page.   * @returns {*}   */  getGroupTagsInfo: function () {    var oResult = {};    try {      var aPageGroups = $.CommonService.ACTIVE_DOCUMENT_TEMPLATE.groups;      var aTagMap = {};      for (var iGroupCount = 0; iGroupCount < aPageGroups.length; iGroupCount++) {        var oContainerGroup = aPageGroups[iGroupCount];        if (oContainerGroup.extractLabel("Name").indexOf("ITCG") == -1) {          continue;        }        var aAllGroupItems = oContainerGroup.allPageItems;        var aInstanceFrames = [];        for (var iFrameCount = 0; iFrameCount < aAllGroupItems.length; iFrameCount++) {          if ($.aFrameTypes.contains(aAllGroupItems[iFrameCount].constructor.name)) {            aInstanceFrames.push(aAllGroupItems[iFrameCount]);          }        }        var aInstanceFrameTagObj = [];        for (var iFrameCount = 0; iFrameCount < aInstanceFrames.length; iFrameCount++) {          aInstanceFrameTagObj = aInstanceFrameTagObj.concat(              $.CommonService.getAllTagsOfFrame(aInstanceFrames[iFrameCount], 'customTagObjects'));        }        var aInstanceFrameTags = [];        for (var iTagCount = 0; iTagCount < aInstanceFrameTagObj.length; iTagCount++) {          aInstanceFrameTags.push(aInstanceFrameTagObj[iTagCount].placeholderId);        }        aTagMap[oContainerGroup.extractLabel("Name")] = aInstanceFrameTags;      }      oResult.data = aTagMap;      oResult.status = "success";    } catch (e) {      var error = new InDesignError(e);      oResult.status = "failure";      oResult.message = error.getErrorMessage($.ProductTemplateLinkingService.CLASS_NAME);    }    return JSON.stringify(oResult);  },  /**generateContentOfItemTemplate() - generates content for all the tagged items inside Item template   * @approach : 1. Loop on input tag list and find the Indesign XMLElement Object for the tag name   *             2. In case data is text, Place is directly in the XMLElement.Contents   *             3. In case data is Image URL, find the cell/Rectangle Frame/Tagged Rectangle Frame for the tag   *             4. Place the Image in the cell/Rectangle Frame/Tagged Rectangle   * @param sTagWithContent   * @returns {*}   */  generateContentOfItemTemplate: function (sTagWithContent) {    var oResult = {};    var oActiveDocument = null;    var oDocumentPreference = null;    try {      oActiveDocument = $.CommonService.ACTIVE_DOCUMENT_TEMPLATE;      oDocumentPreference = $.CommonService.getOriginalDocumentPreferences(oActiveDocument);      $.CommonService.setDocumentPreferencesToPoints(oActiveDocument);      var oTagWithContent = JSON.parse(sTagWithContent);      var oContentGenerated = $.ProductTemplateLinkingService.placeContentsInItemTemplate(oTagWithContent);      $.CommonService.setOriginalDocumentPreferences(oActiveDocument, oDocumentPreference);      var oResult = {};      oResult.tags = oContentGenerated.data;      if (oContentGenerated.status == "success") {        oResult.status = "success";      } else {        oResult.status = "failure"      }    } catch (e) {      if (oActiveDocument) {        $.CommonService.setOriginalDocumentPreferences(oActiveDocument, oDocumentPreference);      }      var error = new InDesignError(e);      oResult.status = 'failure';      oResult.message = error.getErrorMessage($.ProductTemplateLinkingService.CLASS_NAME);    }    return JSON.stringify(oResult);  },  /**   * Traverses on all the text frames and graphic frames present inside the container group and places the content   * whenever the tag is found   * @param oTagWithContent   * @returns {{}}   */  placeContentsInItemTemplate: function (oTagWithContent) {    var oDocument = $.CommonService.ACTIVE_DOCUMENT_TEMPLATE;    var oDocumentPreference = {};    try {      var oContainerGroup = app.selection[0];      var allGroupFrames = oContainerGroup.allPageItems;      var aSuccessfulContentGeneration = [];      var failedContentGeneration = {};      var oResult = {};      oResult.status = "success";      oResult.data = {};      oDocumentPreference = $.CommonService.getOriginalDocumentPreferences(oDocument);      $.CommonService.setDocumentPreferencesToPoints(oDocument);      for (var iPageItem = 0; iPageItem < allGroupFrames.length; iPageItem++) {        var oPageItem = allGroupFrames[iPageItem];        if ($.aFrameTypes.contains(oPageItem.constructor.name)) {          var oFrameXmlElement = oPageItem.associatedXMLElement;          var aXMLElement = [];          if (oFrameXmlElement) {            aXMLElement.push(oFrameXmlElement);            while (aXMLElement.length > 0) {              var oXMLElement = aXMLElement.pop();              if (oTagWithContent.hasOwnProperty(oXMLElement.markupTag.name)) {                var bResult = false;                var oContent = oTagWithContent[oXMLElement.markupTag.name];                try {                  bResult = $.CommonService.placeContents(oContent, oXMLElement, false);                } catch (e) {                  var error = new InDesignError(e);                  e.message = error.getErrorMessage($.ProductTemplateLinkingService.CLASS_NAME);                  failedContentGeneration[oXMLElement.markupTag.name] = e.message;                  oResult.status = "failure";                }                if (bResult) {                  aSuccessfulContentGeneration.push(oXMLElement.markupTag.name);                }              } else {                var aChildElements = oXMLElement.xmlElements;                var iChildCount = aChildElements.length;                while (iChildCount > 0) {                  iChildCount--;                  aXMLElement.push(aChildElements[iChildCount]);                }              }            }          }        }      }      oResult.data.successfulTags = aSuccessfulContentGeneration;      oResult.data.failedTags = failedContentGeneration;      return oResult;    } catch (e) {      var error = new InDesignError(e);      e.message = error.getErrorMessage($.ProductTemplateLinkingService.CLASS_NAME);      throw e;    } finally {      $.CommonService.setOriginalDocumentPreferences(oDocument, oDocumentPreference);    }  },  /**   * this function is used to regenerate the item template instance frames for the master frame   * Internally the function calls deleteObjectTemplateContainerGroup() to delete the object template container group   * followed by calling createItemTemplateLink() to create the new instance frames   * @param sUniqueToken   * @param sType   * @param sItemTemplateName   * @param sItemTemplatePath   * @param sTagName   * @returns {*}   */  recreateItemTemplateLink: function (sType, sItemTemplateName, sItemTemplatePath,                                      sIsEmptyItemTemplate, bIsFitProportional, bIsItemTemplateWithSingleImageFrame,                                      sHeightOfItemTemplateToRender, sWidthOfItemTemplateToRender) {    var oResult = {};    try {      var oContainerGroup = app.selection[0];      var oParentPageForSelection = $.CommonService.getParentPage(oContainerGroup);      var oActiveDocument = null;      var oDocumentPreference = null;      try {        oActiveDocument = $.CommonService.ACTIVE_DOCUMENT_TEMPLATE;        oDocumentPreference = $.CommonService.getOriginalDocumentPreferences(oActiveDocument);        $.CommonService.setDocumentPreferencesToPoints(oActiveDocument);        var x = this.getXCoordinateForSelection(oParentPageForSelection);        var y = oContainerGroup.geometricBounds[0];        if (bIsFitProportional == "false") {          if (y + parseInt(sHeightOfItemTemplateToRender) > oParentPageForSelection.bounds[2] ||              x + parseInt(sWidthOfItemTemplateToRender) > oParentPageForSelection.bounds[3]) {            $.CommonService.setOriginalDocumentPreferences(oActiveDocument, oDocumentPreference);            return "linking out of bound";          }        }        $.CommonService.setOriginalDocumentPreferences(oActiveDocument, oDocumentPreference);      } catch (e) {        $.CommonService.setOriginalDocumentPreferences(oActiveDocument, oDocumentPreference);      }      var oGroupInfo = {};      oGroupInfo.externalName = oContainerGroup.extractLabel("Name");      oGroupInfo.externalId = oContainerGroup.id;      $.ProductTemplateLinkingService.deleteObjectTemplateContainerGroup("false", "");      var sCreatedItemTemplate = $.ProductTemplateLinkingService.createItemTemplateLink(sType,          sItemTemplateName,          sItemTemplatePath,          bIsFitProportional,          bIsItemTemplateWithSingleImageFrame,          JSON.stringify(oGroupInfo));      var oCreatedItemTemplate = JSON.parse(sCreatedItemTemplate);      oResult.status = "success";      oResult.data = oCreatedItemTemplate.data;      oResult.itInfo = oCreatedItemTemplate.itInfo;      ;      oResult.selectionData = oCreatedItemTemplate.selectionData;      var sResult = JSON.stringify(oResult);      //$.CommonService.reHighLightTheSelection();      return sResult;    } catch (e) {      $.log.logException('Error regenerating item template: ', e);      var error = new InDesignError(e);      oResult.status = 'failure';      oResult.message = error.getErrorMessage($.ProductTemplateLinkingService.CLASS_NAME);      return oResult;    }  },  /**scaleItemTemplateAsPerContainerFrame() - Scales down the Item template as per Container frame size, Used when   *  'FitProportionally' rule is applied to ITCF frame   * @param oConatainerFrame - ITCF frame   * @param oPlacedIdms - IT IDMS file   * @param oItemTemplateDimensions   */  scaleItemTemplateAsPerContainerFrame: function (oConatainerFrame, oPlacedIdms, oItemTemplateDimensions) {    try {      //DTP-972: Setting default Reference point anchor for document before scaling ItemTemplate as per container      // frame......      document.layoutWindows[0].transformReferencePoint = AnchorPoint.TOP_LEFT_ANCHOR;      var bIsPlacedIdmlGroup = false;      if (oPlacedIdms.constructor.name == "Group") {        bIsPlacedIdmlGroup = true;      }      var containerBounds = oConatainerFrame.geometricBounds;      var itemTemplateGroupBounds = bIsPlacedIdmlGroup ? oPlacedIdms.visibleBounds : oPlacedIdms.geometricBounds;      var containerY1 = containerBounds[0];      var containerX1 = containerBounds[1];      var containerY2 = containerBounds[2];      var containerX2 = containerBounds[3];      var containerHeight = containerY2 - containerY1;      var containerWidth = containerX2 - containerX1;      var ItemTemplateGroupVerticalScale = null;      var ItemTemplateGrouporizontalScale = null;      if (oItemTemplateDimensions) {        //Transform the existing Item Template group with the new size.        //original source dimension        var ItemTemplateGroupHeight = oItemTemplateDimensions.height + 20;        var ItemTemplateGroupWidth = oItemTemplateDimensions.width + 20;        //find actual dimension on document.        var currentHeigth = itemTemplateGroupBounds[2] - itemTemplateGroupBounds[0];        var currentWidth = itemTemplateGroupBounds[3] - itemTemplateGroupBounds[1];        var heightDiff = currentHeigth - ItemTemplateGroupHeight;        var widthDiff = currentWidth - ItemTemplateGroupWidth;        if (heightDiff < 0) {          itemTemplateGroupBounds[2] = itemTemplateGroupBounds[2] + Math.abs(heightDiff);        } else {          itemTemplateGroupBounds[2] = itemTemplateGroupBounds[2] - heightDiff;        }        if (widthDiff < 0) {          itemTemplateGroupBounds[3] = itemTemplateGroupBounds[3] + Math.abs(widthDiff);        } else {          itemTemplateGroupBounds[3] = itemTemplateGroupBounds[3] - widthDiff;        }        oPlacedIdms.visibleBounds = itemTemplateGroupBounds;        ItemTemplateGroupVerticalScale = ((containerHeight) / ItemTemplateGroupHeight) * 100;        ItemTemplateGrouporizontalScale = ((containerWidth) / ItemTemplateGroupWidth) * 100;      } else {        //transform the linked item template as per the container frame.        var itemTemplateGroupY1 = itemTemplateGroupBounds[0];        var itemTemplateGroupX1 = itemTemplateGroupBounds[1];        var itemTemplateGroupY2 = itemTemplateGroupBounds[2];        var itemTemplateGroupX2 = itemTemplateGroupBounds[3];        var ItemTemplateGroupHeight = itemTemplateGroupY2 - itemTemplateGroupY1;        var ItemTemplateGroupWidth = itemTemplateGroupX2 - itemTemplateGroupX1;        ItemTemplateGroupVerticalScale = ((containerHeight - 20) / ItemTemplateGroupHeight) * 100;        ItemTemplateGrouporizontalScale = ((containerWidth - 20) / ItemTemplateGroupWidth) * 100;      }      oPlacedIdms.verticalScale = ItemTemplateGroupVerticalScale;      oPlacedIdms.horizontalScale = ItemTemplateGrouporizontalScale;    } catch (e) {      throw e;    }  },  /**Merge the selected frames with the selected Object template Frame   * @returns {*}   */  mergeSelectedFrames: function () {    var oResult = {};    try {      var aSelection = app.selection;      var oDoc = $.CommonService.ACTIVE_DOCUMENT_TEMPLATE;      var sUniqueToken = oDoc.extractLabel('uniqueToken');      var aFramesToMerge = [];      var oMergedFramesOldNamesLayersMap = {};      var aColor = [];      var bIsFrameSkipped = 'false';      var oDtpGroup;      for (var i = 0; i < aSelection.length; i++) {        sFrameName = aSelection[i].extractLabel('Name');        if (aSelection[i].constructor.name == "Group") {          aSelection = aSelection.concat(aSelection[i].allPageItems);          continue;        }        var oDTPGroupInfo = $.CommonService.getSlotInfo(aSelection[i]);        if (oDTPGroupInfo.slotFound) {          oDtpGroup = oDTPGroupInfo;          aColor[0] = aSelection[i].extractLabel('cRED');          aColor[1] = aSelection[i].extractLabel('cGREEN');          aColor[2] = aSelection[i].extractLabel('cBLUE');        } else {          aFramesToMerge.push(aSelection[i]);        }      }      for (var i = 0; i < aFramesToMerge.length; i++) {        var oFrame = aFramesToMerge[i];        var sFrameName = oFrame.extractLabel('Name');        oMergedFramesOldNamesLayersMap[sFrameName] = oFrame.itemLayer.name;        oFrame.insertLabel("slotId", oDtpGroup.slotInfo);        oFrame.insertLabel('cRED', aColor[0]);        oFrame.insertLabel('cGREEN', aColor[1]);        oFrame.insertLabel('cBLUE', aColor[2]);        $.DocumentTemplateService.regenerateLabel(sUniqueToken, oFrame);        var oFrameXMLElement = oFrame.associatedXMLElement;        if (oFrameXMLElement && oFrameXMLElement.isValid && aColor.length) {          var color = [parseFloat(aColor[0]), parseFloat(aColor[1]), parseFloat(aColor[2])];          $.CommonService.setTagColorForAllDataTagInHierarchyDFS(oFrameXMLElement, color);        }      }      oResult.status = 'success';      oResult.mergedFrames = oMergedFramesOldNamesLayersMap;      oResult.isFramesSkiped = bIsFrameSkipped;    } catch (e) {      var error = new InDesignError(e);      oResult.status = 'failure';      oResult.message = error.getErrorMessage($.ProductTemplateLinkingService.CLASS_NAME);    }    return JSON.stringify(oResult);  },  /*----------------------------------utility functions start here--------------------------------------*/  /**pushCopiedTagsToAddedTags() - Push the tags array in $.SimpleFrameLinkingService.addedTags   * @approach : 1. prepares a custom tag object array with Indesign tag object array   *             2. Adds custom property 'tagLevel' for tableFrame   * @param aTags - Array of Indesign markup tags   * @returns {*}   */  pushCopiedTagsToAddedTags: function (aTags) {    $.printMessage("*** pushCopiedTagsToAddedTags ***");    try {      for (var i = 0; i < aTags.length; i++) {        if (aTags[i].name.indexOf("csdtp") != -1) {          var oTag = {};          oTag.placeholderId = aTags[i].name;          oTag.isCopyOf = aTags[i].extractLabel("isCopyOf");          //DTP-1197 Setting the value of key ""isCopyOf" to empty string as it is not needed any more          aTags[i].insertLabel("isCopyOf", "");          if (aTags[i].extractLabel("placeholderType") == $.CommonService.tagLevelTableFrame) {            oTag.placeholderType = 'tableFrame'          }          $.SimpleFrameLinkingService.addedTags.push(oTag);        }      }    } catch (e) {      $.printMessage("??? Error in pushCopiedTagsToAddedTags -" + e.message);    }  },  /**getNewlyPlacedFrameOnPage() - Retrieves all the newly placed frames after IDMS place on page   * @param aFrameNames   * @param oPage   * @returns {Array}   */  getNewlyPlacedFrameOnPage: function (aFrameUniqueID, oPage) {    $.printMessage("*** getNewlyPlacedFrameOnPage ***");    try {      var framesInAsset = [];      var aFramesInPage = oPage.allPageItems;      for (var iFrameCount = 0; iFrameCount < aFramesInPage.length; iFrameCount++) {        if (!aFrameUniqueID.contains(aFramesInPage[iFrameCount].id)) {          framesInAsset.push(aFramesInPage[iFrameCount]);        }      }      return framesInAsset;    } catch (e) {      $.printMessage("??? Error in getNewlyPlacedFrameOnPage -" + e.message);      throw e;    }  },  /** this function will delete the item template group and create a parking position with the same dimensions as the   * item template group. In case any product is linked to the group it creates a tag on the text frame   * @param sIsProductLinked : boolean value to remove/preserve tag on frame   * @returns {*}   */  deleteObjectTemplateDTPGroup: function (sDtpGroupId) {    try {      var oActiveDoc = $.CommonService.ACTIVE_DOCUMENT_TEMPLATE;      var aFrames = oActiveDoc.allPageItems;      for (var iFrameCount = aFrames.length - 1; iFrameCount >= 0; iFrameCount--) {        var oFrame = aFrames[iFrameCount];        if (oFrame.isValid) {          var oDtpGroupInfo = $.CommonService.getSlotInfo(oFrame);          if (oDtpGroupInfo.slotFound && oDtpGroupInfo.slotId == sDtpGroupId) {            oFrame.remove();          }        }      }      var oResult = {};      oResult.status = 'success';      oResult.selectionInfo = $.CommonService.getActiveSelectionObjectFromPlugin();    } catch (e) {      var error = new InDesignError(e);      var oResult = {};      oResult.status = 'failure';      oResult.message = error.getErrorMessage($.ProductTemplateLinkingService.CLASS_NAME);    }    return JSON.stringify(oResult);  },  deleteContentOfGroup: function (sSlotId, sCurrentlyLinkedTagInfo) {    var oResult = {};    try {      var oCurrentlyLinkedTagInfo = JSON.parse(sCurrentlyLinkedTagInfo)      var oActiveDoc = $.CommonService.ACTIVE_DOCUMENT_TEMPLATE;      var aPageItems = oActiveDoc.allPageItems;      for (var iIndex = 0; iIndex < aPageItems.length; iIndex++) {        var oPageItem = aPageItems[iIndex];        if (oPageItem.isValid) {          if ($.aGraphicFrameTypes.contains(oPageItem.constructor.name)) {            handleRectangleUnlinking(oPageItem);          } else if (oPageItem.constructor.name == "TextFrame") {            handleTextFrameUnlinking(oPageItem);          }        }      }      function handleTextFrameUnlinking (textFrame) {        var oDtpGroupInfo = $.CommonService.getSlotInfo(textFrame);        if (oDtpGroupInfo.slotFound && oDtpGroupInfo.slotId == sSlotId) {          var oXMLElementFrame = textFrame.associatedXMLElement;          if (oXMLElementFrame) {            if (textFrame.parentStory.tables.length == 1 && textFrame.extractLabel("contentType") != "flexTable") {              handleProductUnlinkingFromTable(oCurrentlyLinkedTagInfo, textFrame);              return;            } else if (!$.CommonService.isCSDTPTag(oXMLElementFrame.markupTag.name)) {              handleInlineUnlinking(textFrame);            } else {              var oXMLTagFrame = oXMLElementFrame.markupTag;              if (oCurrentlyLinkedTagInfo[oXMLTagFrame.name]) {                var oDTPGroupInfo = oCurrentlyLinkedTagInfo[sSlotId];                if (oDTPGroupInfo.slotId) {                  oDTPGroupInfo.slotId = oDTPGroupInfo.id;                } else if (oDTPGroupInfo.id) {                  oDTPGroupInfo.slotId = oDTPGroupInfo.id;                }                textFrame.insertLabel("slotId", JSON.stringify(oDTPGroupInfo));                textFrame.insertLabel(oXMLTagFrame.name, JSON.stringify(oCurrentlyLinkedTagInfo[oXMLTagFrame.name]));                oXMLElementFrame.contents = "";                if (!oCurrentlyLinkedTagInfo[oXMLTagFrame.name].attributeId) {                  textFrame.insertLabel(oXMLTagFrame.name, "");                  oXMLElementFrame.untag();                  oXMLTagFrame.remove("Root");                }              }            }          }        }      }      function handleRectangleUnlinking (oRectangle) {        var oDtpGroupInfo = $.CommonService.getSlotInfo(oRectangle);        if (oDtpGroupInfo.slotFound && oDtpGroupInfo.slotId == sSlotId) {          var oXMLElementRectangle = oRectangle.associatedXMLElement;          if (!oXMLElementRectangle) {            $.CommonService.deleteImageContentFromRectangle(oRectangle, oActiveDoc);            return;          }          var oXMLTagRectangle = oXMLElementRectangle.markupTag;          if (oXMLTagRectangle.name.split($.CommonService.SEPERATOR_TOKEN)[7]) {            if (oCurrentlyLinkedTagInfo[oXMLTagRectangle.name]) {              // delete image only if tagItemInfo length is 0 or it does not exist              if (!oCurrentlyLinkedTagInfo[oXMLTagRectangle.name].item || !oCurrentlyLinkedTagInfo[oXMLTagRectangle.name].item.itemId) {                var oDTPGroupInfo = oCurrentlyLinkedTagInfo[sSlotId];                if (oDTPGroupInfo.slotId) {                  oDTPGroupInfo.slotId = oDTPGroupInfo.id;                } else if (oDTPGroupInfo.id) {                  oDTPGroupInfo.slotId = oDTPGroupInfo.id;                }                oRectangle.insertLabel("slotId", JSON.stringify(oDtpGroupInfo));                oRectangle.insertLabel(oXMLTagRectangle.name, JSON.stringify(oCurrentlyLinkedTagInfo[oXMLTagRectangle.name]));                $.CommonService.deleteImageContentFromRectangle(oRectangle, oActiveDoc);                //if no attribute in case of product linked then remove tags                if (!oCurrentlyLinkedTagInfo[oXMLTagRectangle.name].item ||                    !oCurrentlyLinkedTagInfo[oXMLTagRectangle.name].item.attributeId) {                  oRectangle.insertLabel(oXMLTagRectangle.name, "");                  oXMLElementRectangle.untag();                  oXMLTagRectangle.remove("Root");                }              }            }          }        }      }      function handleInlineUnlinking (textFrame) {        var oXMLElementFrame = textFrame.associatedXMLElement;        var aFrameInlineXMLElements = oXMLElementFrame.xmlElements;        for (var j = 0; j < aFrameInlineXMLElements.length; j++) {          if ($.CommonService.isCSDTPTag(aFrameInlineXMLElements[j].markupTag.name)) {            var oXMLElementInline = aFrameInlineXMLElements[j];            var sInlineTagName = oXMLElementInline.markupTag.name;            if (oCurrentlyLinkedTagInfo[sInlineTagName] && !oCurrentlyLinkedTagInfo[sInlineTagName].linkedEntityId) {              var oDTPGroupInfo = oCurrentlyLinkedTagInfo[sSlotId];              if (oDTPGroupInfo.slotId) {                oDTPGroupInfo.slotId = oDTPGroupInfo.id;              } else if (oDTPGroupInfo.id) {                oDTPGroupInfo.slotId = oDTPGroupInfo.id;              }              textFrame.insertLabel("slotId", JSON.stringify(oDTPGroupInfo));              textFrame.insertLabel(sInlineTagName, JSON.stringify(oCurrentlyLinkedTagInfo[sInlineTagName]));              oXMLElementInline.contents = $.CommonService.sPlaceholderText;              if (!oCurrentlyLinkedTagInfo[sInlineTagName].attributeId) {                textFrame.insertLabel(sInlineTagName, "");                var oTag = oXMLElementInline.markupTag;                oXMLElementInline.untag();                oTag.remove("Root");                j--;              }            }          }        }      }      function handleProductUnlinkingFromTable (oCurrentlyLinkedTagInfo, textFrame) {        var aTableTags = $.CommonService.getTableTags(textFrame, "tagNames");        var aTableTagsDetailed = [];        for (var iTableTagCount = 0; iTableTagCount <= aTableTags.length; iTableTagCount++) {          if (oCurrentlyLinkedTagInfo[aTableTags[iTableTagCount]]) {            var oTagToBeUpdated = oCurrentlyLinkedTagInfo[aTableTags[iTableTagCount]];            if ((oTagToBeUpdated && !oTagToBeUpdated.linkedEntityId)) {              var oDTPGroupInfo = oCurrentlyLinkedTagInfo[sSlotId];              if (oDTPGroupInfo.slotId) {                oDTPGroupInfo.slotId = oDTPGroupInfo.id;              } else if (oDTPGroupInfo.id) {                oDTPGroupInfo.slotId = oDTPGroupInfo.id;              }              textFrame.insertLabel("slotId", JSON.stringify(oDTPGroupInfo));              textFrame.insertLabel(aTableTags[iTableTagCount], JSON.stringify(oCurrentlyLinkedTagInfo[aTableTags[iTableTagCount]]));              var oTagToUnlink = {};              var sTagToBeDeleted = 'false';              if (!oTagToBeUpdated.attributeId) {                sTagToBeDeleted = 'true';                textFrame.insertLabel(aTableTags[iTableTagCount], "");              }              oTagToUnlink[aTableTags[iTableTagCount]] = sTagToBeDeleted;              aTableTagsDetailed.push(oTagToUnlink);            }          }        }        return $.CommonService.removeContentFromTableTags(textFrame, aTableTagsDetailed);      }      oResult.status = "success";    } catch (e) {      var error = new InDesignError(e);      oResult.status = 'failure';      oResult.message = error.getErrorMessage($.ProductTemplateLinkingService.CLASS_NAME);    }    return JSON.stringify(oResult);  },  getXCoordinateForSelection: function (oParentPageForSelection) {    var oSelection = app.selection[0];    var oParentSpread = oSelection.parent;    if (oParentSpread.constructor.name == "Spread") {      var aPagesInSpread = oParentSpread.pages;      var iX = 0;      for (var iPage = 0; iPage < aPagesInSpread.length; iPage++) {        if (oParentPageForSelection == aPagesInSpread[iPage]) {          iX += oSelection.geometricBounds[1];          break;        } else {          var iPageWidth = aPagesInSpread[iPage].bounds[3] - aPagesInSpread[iPage].bounds[1];          iX += iPageWidth;        }      }      return iX;    } else {      return oSelection.geometricBounds[1];    }  }}//--------------- END ProductTemplateLinkingService.jsx ------------///////////////////////////////////////////////////////////////////-----------   SIMPLE FRAME LINKING SERVICE .jsx ------------/////////////////////////////////////////////////////////////////$.SimpleFrameLinkingService = {  removedTags: [],  addedTags: [],  updatedTags: [],  tagTransformationInfo: "",  CLASS_NAME : 'SimpleFrameLinkingService',  /**createXmlTagOnFrame()  Creates/updates XML tag on selection   * @param sContext    : "ProductList" when product is linked, "AttributeList" when attribute is linked   * @param oCSObject   : csObject which is in linking process while creating XML tag on selection   * @param bIsLinking  : 'true' - if linking, 'false' - if un-linking   * @returns {*}   */  createXmlTagOnFrame: function (sContext, oCSObject, bIsLinking) {    var oActiveDoc = $.CommonService.ACTIVE_DOCUMENT_TEMPLATE;    var sUniqueToken = oActiveDoc.extractLabel('uniqueToken');    var sCSObjectType = oCSObject.class ? oCSObject.class : "";    /*------Local inline Functions for createXmlTagOnFrame() start-------*/    try {      /**addTag() creates oXMLTag on type csdtp on active selection       * @param oSelected - Object of Active selection in In-design       * */      function addTag (oSelected) {        var oXMLTag = $.CommonService.getATagObjectWithSomeRandName();        var oParentFrameForSelection = $.CommonService.getFrameForSelection(oSelected);        var oDtpGroupInfo = $.CommonService.getSlotInfo(oParentFrameForSelection);        if (oDtpGroupInfo.slotFound) {          var color = $.CommonService.getTagColorForTagsInEntityHierarchy(oParentFrameForSelection);          if (color != "NULL") {            oXMLTag.tagColor = color;          }        }        if(oXMLTag){          oXMLTag.name = $.DocumentTemplateService.regenerateLabel(sUniqueToken, oXMLTag);          oActiveDoc.xmlElements[0].xmlElements.add(oXMLTag, oSelected);          var sTagLevel = "";          if ($.CommonService.inlineSelectionTypes.contains(oSelected.constructor.name)) {            oXMLTag.insertLabel("placeholderType", $.CommonService.tagLevelFrameInline);            sTagLevel = "frameInline";          } else if ($.CommonService.frameSelectionTypes.contains(oSelected.constructor.name)) {            oXMLTag.insertLabel("placeholderType", $.CommonService.tagLevelFrame);            sTagLevel = "frame";          }          //Write Linked Info Object for Tag, To Frame          $.CommonService.setIndesignIDToFrame(oParentFrameForSelection, sUniqueToken);          //Now pushing the added oXMLTag in the addedTags object(used by JS for linking)          var aAddTag = new Object();          aAddTag.placeholderId = oXMLTag.name;          aAddTag.placeholderType = sTagLevel;          $.SimpleFrameLinkingService.addedTags.push(aAddTag);          return oXMLTag;        } else {          throw new Error("Tag could not be created");        }      }      /**removeTag() - removes the XMLTag from document hierarchy and replaces it's occurences with 'Root' Tag       * @param oXMLElement - XMLElement object of tag to be removed       * @param oPFrame       * @returns {{}}       */      function removeTag (oXMLElement, oPFrame) {        var oRemovedTag = {};        oRemovedTag.placeholderId = oXMLElement.markupTag.name;        $.SimpleFrameLinkingService.removedTags.push(oRemovedTag);        var oTagToBeRemoved = oXMLElement.markupTag;        oPFrame.insertLabel(oXMLElement.markupTag.name, "");        oXMLElement.untag();        oTagToBeRemoved.remove("Root");        return oRemovedTag;      }      /**updateTag() - this function just fills the SimpleFrameLinkingService.updatedTags array with the updated tag       * Info       * @param oXMLElement - XMLElement object of tag whose details are to be pushed in updatedTags array       * @returns {{}}       */      function updateTag (oXMLElement) {        var oUpdatedTag = {};        oUpdatedTag.placeholderId = oXMLElement.markupTag.name;        $.SimpleFrameLinkingService.updatedTags.push(oUpdatedTag);        return oUpdatedTag;      }      /**confirmAndReplaceTag() prompts the user to bReplace the tag, if user tag is found       * if CSDTP tag found, then retains the same tag       * if no Tag found, then create the tag       * @param oXmlElement       * @param oSelected       * @returns {*}       */      function confirmAndReplaceTag (oXmlElement, oSelected) {        var aXmlElements = oXmlElement.xmlElements;        var bInlineCSDTPTagFound = false;        if (aXmlElements && aXmlElements.length > 0) {          for (var iChildTagCount = 0; iChildTagCount < aXmlElements.length; iChildTagCount++) {            if ($.CommonService.isCSDTPTag(aXmlElements[iChildTagCount].markupTag.name)) {              bInlineCSDTPTagFound = true;              break;            }          }        }        if (bInlineCSDTPTagFound) {          if (sContext == "ProductList") {            if (aXmlElements.length > 0) {              for (var i = 0; i < aXmlElements.length; i++) {                var oChildTag = aXmlElements[i].markupTag;                if ($.CommonService.isCSDTPTag(oChildTag.name)) {                  updateTag(aXmlElements[i]);                }              }            }          } else {            var sMessage = localize({              en: "The frame already contains inline text that are associated with links, " +                  "do you want to remove these and instead have link(s) at the frame level?",              de: "Der Rahmen enthält bereits Inline-Text, der mit Links verknüpft ist; möchten Sie " +                  "diese entfernen und stattdessen Verknüpfung (en) auf der Rahmenebene haben?"});            var bReplace = confirm(sMessage);            if (bReplace) {              $.CommonService.checkInlineElementsAndRemove('SimpleFrame', aXmlElements, oSelected);              oXmlElement.untag();              tag = addTag(oSelected);            }            else {              $.SimpleFrameLinkingService.addedTags = [];              $.SimpleFrameLinkingService.removedTags = [];              $.SimpleFrameLinkingService.updatedTags = [];            }          }        } else {          oXmlElement.untag();          addTag(oSelected);        }      }      /*--------Local inline Functions for createXmlTagOnFrame() end----------*/      if($.CommonService.isOverFlowOnHiddenSelection()){        app.selection = null;        throw new Error('OVERFLOW_ERROR');      }      var oSelected = app.selection[0];      var oParentFrameForSelection = $.CommonService.getFrameForSelection(oSelected);      if(oParentFrameForSelection.extractLabel("Name") == ""){        var sParentFrameName  = $.DocumentTemplateService.regenerateLabel(sUniqueToken, oParentFrameForSelection);        oParentFrameForSelection.insertLabel("Name", sParentFrameName);        oParentFrameForSelection.insertLabel($.CommonService.IDSN_ID, sUniqueToken + $.CommonService.METATOKEN +            oParentFrameForSelection.id);      }      switch (oSelected.constructor.name) {        case 'Text':        case 'TextColumn':        case 'TextStyleRange':        case 'Word':        case 'Paragraph':        case 'Character':        case 'Line':          var oOwnerFrameXMLElement = oParentFrameForSelection.associatedXMLElement;          if (oOwnerFrameXMLElement) {            //if frame-inline, check if csdtp tag on frame and ask for bReplace,else create csdtp tag on inline text            var oOwnerFrameTag = oOwnerFrameXMLElement.markupTag;            //case 1: Tag on frame is CSDTP, we prompt user, if yes, Replace the tag with story after deleting the CSDTP tag, If No, return            if ($.CommonService.isCSDTPTag(oOwnerFrameTag.name)) {              var sMessage = localize({                en: "The frame is already associated with links, " +                    "do you want to remove these and instead have link(s) on the inline texts?",                de: "Der Rahmen ist bereits mit Links verknüpft, möchten Sie " +                    "diese entfernen und stattdessen Verknüpfung (en) auf den Inline-Texten haben?"});              var bReplace = confirm(sMessage);              if (bReplace) {                //MEDUSA-528 remove tag info from frame                oActiveDoc.removeAdornmentFromTagDTP(oOwnerFrameXMLElement.markupTag.name, sUniqueToken, "textFrame");                // untag and then remove old tag                removeTag(oOwnerFrameXMLElement, oParentFrameForSelection);                //Generate a unique tag and set the specific color if needed, then apply it on frame                var oRandomParentTag = $.CommonService.getATagObjectWithSomeRandName();                var oDtpGroupInfo = $.CommonService.getSlotInfo(oParentFrameForSelection);                if (oDtpGroupInfo.slotFound) {                  var color = $.CommonService.getTagColorForTagsInEntityHierarchy(oParentFrameForSelection);                  if (color != "NULL")                    oRandomParentTag.tagColor = color;                  //Get the group color                }                oActiveDoc.xmlElements[0].xmlElements.add(oRandomParentTag, oParentFrameForSelection);              }              else {                return;              }            }          } else {            //There is no tag on frame, hence create a story tag            //Generate a unique tag and set the specific color if needed, then apply it on frame            var oRandomParentTag = $.CommonService.getATagObjectWithSomeRandName();            var oDtpGroupInfo = $.CommonService.getSlotInfo(oParentFrameForSelection);            if (oDtpGroupInfo.slotFound) {              var color = $.CommonService.getTagColorForTagsInEntityHierarchy(oParentFrameForSelection);              if (color != "NULL")                oRandomParentTag.tagColor = color;              //Get the group color            }            oActiveDoc.xmlElements[0].xmlElements.add(oRandomParentTag, oParentFrameForSelection);          }          // remove XML Markers (if any) from the selectedText          var sVisibleText = $.CommonService.removeXMLMarkersFromSelectedText(oSelected.contents);          // get all the Inline tags present in the current selection          var aSelectedInlineXMLElements = $.CommonService.getInlineXMLElementsForSelection(oSelected.characters);          if (aSelectedInlineXMLElements.length == 0) {            //case when the selection doesn't already have any tags; hence, create new tag for the selection            // check if there are other tags on the frame, which have the same object type as the one being linked            // if the object type is not the same, then don't proceed with linking            var bIsCorrectItemType = $.CommonService.checkCSObjectTypeForFrame(oParentFrameForSelection, sCSObjectType);            if(bIsCorrectItemType){              addTag(oSelected, oCSObject);            } else {              throw new Error($.CommonService.sMisMatchedCSObjectType);            }          } else if (aSelectedInlineXMLElements.length == 1) {            // this case is when the selection spans over exactly one tag;            // 2 further sub-cases possible:            // a. the selected text (after removing the XML Markers) is same as that of the tagged text;            //    in this case, we just need to update the tag            // b. the selected text (after removing the XML Markers) contains extra characters or lesser characters            // other than the tagged text            //  in this case, we need to remove the old tag and create a new tag for the selected text            var sTaggedText = aSelectedInlineXMLElements[0].contents;            if (sTaggedText == sVisibleText) {              //check if the tag is a Rule tag or a Data-Rule tag              updateTag(aSelectedInlineXMLElements[0]);              // change the selection to the tagged text so that no XMl Marker is selected while content is generated              $.CommonService.ACTIVE_DOCUMENT_TEMPLATE.select(aSelectedInlineXMLElements[0].xmlContent, SelectionOptions.REPLACE_WITH);            } else {              var bIsCorrectItemType = $.CommonService.checkCSObjectTypeForFrame(oParentFrameForSelection, sCSObjectType);              if(!bIsCorrectItemType){                throw new Error($.CommonService.sMisMatchedCSObjectType);              }              var sMessage = localize({                en: "The text is already associated with links, " +                    "do you want to remove these and instead have link(s) on the new selection?",                de: "Der Text ist bereits mit Links verknüpft, möchten Sie diese entfernen " +                    "und stattdessen Verknüpfung (en) auf neuer Auswahl haben?"});              var bReplace = confirm(sMessage);              if (bReplace) {                var sCurrentName = aSelectedInlineXMLElements[0].markupTag.name;                var tagDetailsForAdornmentRemove = {};                tagDetailsForAdornmentRemove.tagName = sCurrentName;                tagDetailsForAdornmentRemove.tagType = "inlineText";                oActiveDoc.removeAdornmentFromTagDTP(sCurrentName, sUniqueToken, "inlineText");                // untag and then remove old tag                removeTag(aSelectedInlineXMLElements[0], oParentFrameForSelection);                // create new tag                addTag(oSelected);              } else {                return;              }            }          } else if (aSelectedInlineXMLElements.length > 1) {            // this case is when the selection spans over more than one tag            // iterate over the selectedInlineTags and remove all the existing tags from the selection            var bIsCorrectItemType = $.CommonService.checkCSObjectTypeForFrame(oParentFrameForSelection, sCSObjectType);            if(!bIsCorrectItemType){              throw new Error($.CommonService.sMisMatchedCSObjectType);            }            var sMessage = localize({              en: "The text is already associated with links, " +                  "do you want to remove these and instead have link(s) on new selection?",              de: "Der Text ist bereits mit Links verknüpft, möchten Sie diese entfernen" +                  " und stattdessen Verknüpfung (en) auf neuer Auswahl haben?"});            var bReplace = confirm(sMessage);            if (bReplace) {              for (var iRemoveTagCounter = 0; iRemoveTagCounter < aSelectedInlineXMLElements.length; iRemoveTagCounter++) {                //below sends event to plugin which removes the adornment if applied on the selected xml tags                oActiveDoc.removeAdornmentFromTagDTP(aSelectedInlineXMLElements[iRemoveTagCounter].markupTag.name, sUniqueToken, "inlineText");                removeTag(aSelectedInlineXMLElements[iRemoveTagCounter], oParentFrameForSelection);              }              addTag(oSelected);            } else {              return;            }          }          var oResult = $.SimpleFrameLinkingService.buildResultOfTagging(oParentFrameForSelection);          oResult.selectionData = $.CommonService.getActiveSelectionObjectFromPlugin();          return JSON.stringify(oResult);        case 'TextFrame':          var oAssociatedXMLElement = oSelected.associatedXMLElement;          if (oAssociatedXMLElement == null) {            var bIsCorrectItemType = $.CommonService.checkCSObjectTypeForFrame(oSelected, sCSObjectType);            if(bIsCorrectItemType){              addTag(oSelected);            }          } else if ($.CommonService.isCSDTPTag(oAssociatedXMLElement.markupTag.name)) {            updateTag(oAssociatedXMLElement);          } else {            // case for inline tag, hence ask for bReplace            confirmAndReplaceTag(oAssociatedXMLElement, oSelected);          }          var oResult = $.SimpleFrameLinkingService.buildResultOfTagging(oSelected);          oResult.selectionData = $.CommonService.getActiveSelectionObjectFromPlugin();          return JSON.stringify(oResult);        case 'InsertionPoint':          var aAssociatedXMLElements = oSelected.associatedXMLElements;          if ($.CommonService.isCSDTPTag(aAssociatedXMLElements[0].markupTag.name)) {            var contents = aAssociatedXMLElements[0].texts[0];            app.select(contents);            oSelected = app.selection[0];            updateTag(aAssociatedXMLElements[0]);           //storing the updated tag if csdtp          }          var oResult = $.SimpleFrameLinkingService.buildResultOfTagging(oParentFrameForSelection);          oResult.selectionData = $.CommonService.getActiveSelectionObjectFromPlugin();          return JSON.stringify(oResult);        case 'Rectangle':        case 'Polygon':        case 'Oval':          if (oSelected.contentType && (oSelected.contentType == ContentType.GRAPHIC_TYPE ||              oSelected.contentType == ContentType.UNASSIGNED)) //1735553140 denotes GRAPHIC_TYPE.          {            var oAssociateXmlElement = oSelected.associatedXMLElement;            if (oAssociateXmlElement == null) {              addTag(oSelected);            } else if ($.CommonService.isCSDTPTag(oAssociateXmlElement.markupTag.name)) {              updateTag(oAssociateXmlElement);            } else {              //case if frame has external or story tag, hence delete and create new tag              oAssociateXmlElement.untag();              addTag(oSelected);            }            var oResult = $.SimpleFrameLinkingService.buildResultOfTagging(oSelected);            oResult.selectionData = $.CommonService.getActiveSelectionObjectFromPlugin();            return JSON.stringify(oResult);          }          break;        default:          throw new Error("DTP_ERROR: Entity in selection is  " + "'" + oSelected.constructor.name + "'" + " which is not " +              "handled in switch case");      }    }    catch (e) {      var error = new InDesignError(e);      var message = error.getErrorMessage($.SimpleFrameLinkingService.CLASS_NAME);      e.message = message;      throw e;    }  }, //createXMLTagOnFrame  /*----------------------------utility functions start here-----------------------------------*/  /**buildResultOfTagging() - takes the required input arguments and builds the result to be returned to JS   * @param oSelection   * @returns {*}   */  buildResultOfTagging: function (oSelection) {    try {      var frame           = oSelection;      var frameObj        = new Object();      frameObj.externalId = frame.id;      var sFrameLabel     = frame.extractLabel("Name");      var sSelectionName  = oSelection.extractLabel("Name");      if (sFrameLabel != "" && sSelectionName != "") {        frameObj.externalLabel = sFrameLabel;        frameObj.externalName  = sSelectionName;        frameObj.layerName     = frame.itemLayer.name;      }      var oResult                                       = new Object();      oResult.frame                                     = frameObj;      oResult.removedTags                               = $.SimpleFrameLinkingService.removedTags;      // addedTag wont be more than one in scenario      oResult.addedTags                                 = $.SimpleFrameLinkingService.addedTags;      oResult.updatedTag                                = $.SimpleFrameLinkingService.updatedTags;      oResult.tagTransformationInfo                     = $.SimpleFrameLinkingService.tagTransformationInfo;      $.SimpleFrameLinkingService.addedTags             = [];      $.SimpleFrameLinkingService.removedTags           = [];      $.SimpleFrameLinkingService.updatedTags           = [];      $.SimpleFrameLinkingService.tagTransformationInfo = "";      return oResult;    } catch (e) {      throw e;    }  }}//--------------- END SimpleFrameLinkingService.jsx ------------///////////////////////////////////////////////////////////////////-----------   DOCUMENT TEMPLATE  LINKING SERVICE .jsx ------------/////////////////////////////////////////////////////////////////$.aFrameTypes = ["TextFrame", "Rectangle", "Oval", "Polygon"];$.aGraphicFrameTypes = ["Rectangle", "Oval", "Polygon"];$.mapOfTypesForGeneratingLabel = {  "TextFrame": "Frame",  "Rectangle": "Frame",  "Polygon": "Frame",  "Oval": "Frame",  "XMLTag": "Tag"};$.DocumentTemplateService = {  token: "_-",  DATA_TAG_TYPE: "D",  DATA_AND_RULE_TAG_TYPE: "DR",  NON_INLINE_DATA_TAGS : ['frame','tableFrame','cell'],  mapOfTagLevel : {},  aNonPrintableFrameNames: [],  ACTIVE_LAYER: "activeLayer",  ALL_VISIBLE_LAYERS: "allVisibleLayers",  CURRET_SELECTION: "currentSelection",  SELECTED_PAGE_ITEMS: "selectedPageItems",  ALL_FRAMES: "allFrames",  CLASS_NAME: "DocumentTemplateService.jsx",  getActiveDocDetailsForUpload: function (activeDocument) {    $.printMessage("*** getActiveDocDetailsForUpload ***");    var oResult = {};    try {      var oActiveDoc = activeDocument;      if (!oActiveDoc.visible) {        oResult.status = "failure";        oResult.message = "No documents are open";      }      oResult.data = {};      var sUniqueToken = oActiveDoc.extractLabel("uniqueToken");      oResult.data.uniqueToken = sUniqueToken;      oResult.data.mamFileId = oActiveDoc.extractLabel("templateId");      oResult.data.shareId = oActiveDoc.extractLabel("shareId");      oResult.data.isOpenedFromDTP = oActiveDoc.extractLabel("isOpenedFromDTP");      oResult.data.isMD = oActiveDoc.extractLabel("isMD");      oResult.data.saved = oActiveDoc.saved;      oResult.data.modified = oActiveDoc.modified;      oResult.data.id = oActiveDoc.id;      oResult.data.templateType = oActiveDoc.extractLabel("templateType");      //TODO: used some standard document model API for below      if(oActiveDoc.saved) {        oResult.data.fileBaseName = oActiveDoc.name.substr(0, oActiveDoc.name.length - 5);        oResult.data.fileExtension = oActiveDoc.name.substr(oActiveDoc.name.length - 4);      } else {        oResult.data.fileBaseName = "";        oResult.data.fileExtension = "";      }      oResult.status = "success";    } catch (e) {      $.printMessage("??? ERROR: getActiveDocDetailsForUpload -" + e.message);      var error = new InDesignError(e);      oResult.message = error.getErrorMessage($.DocumentTemplateService.CLASS_NAME);      oResult.status = "failure";    }    return JSON.stringify(oResult);  },  regenerateLabel: function (sUniqueToken, oItem) {    try {      var sItemConstructorName = oItem.constructor.name;      var sItemTypes = ["XMLTag"];      var sLabel;      if ($.aFrameTypes.contains(sItemConstructorName)) {        var sItemType = $.mapOfTypesForGeneratingLabel[sItemConstructorName];        sLabel = "csdtp" + $.DocumentTemplateService.token + $.DocumentTemplateService.getTemplateTypeByUniqueToken(sUniqueToken) +            $.DocumentTemplateService.token + sItemType + $.DocumentTemplateService.token + sUniqueToken +            $.DocumentTemplateService.token + oItem.id + $.DocumentTemplateService.token + $.CommonService.getCurrentTimeStamp();      }      else if (sItemTypes.contains(sItemConstructorName)) {        // this is the case for generating tag names        var sItemType = $.mapOfTypesForGeneratingLabel[sItemConstructorName];        var sTemplateType = $.DocumentTemplateService.getTemplateTypeByUniqueToken(sUniqueToken);        if (sTemplateType == "DT") {          if (oItem.name.indexOf(sItemType + $.DocumentTemplateService.token + $.DocumentTemplateService.DATA_AND_RULE_TAG_TYPE) != -1) {            sLabel = "csdtp" + $.DocumentTemplateService.token + sTemplateType + $.DocumentTemplateService.token +                sItemType + $.DocumentTemplateService.token + $.DocumentTemplateService.DATA_AND_RULE_TAG_TYPE +                $.DocumentTemplateService.token + sUniqueToken + $.DocumentTemplateService.token + oItem.id +                $.DocumentTemplateService.token + $.CommonService.getCurrentTimeStamp();          } else if (oItem.name.indexOf(sItemType + $.DocumentTemplateService.token + $.DocumentTemplateService.DATA_TAG_TYPE) != -1) {            sLabel = "csdtp" + $.DocumentTemplateService.token + sTemplateType + $.DocumentTemplateService.token +                sItemType + $.DocumentTemplateService.token + $.DocumentTemplateService.DATA_AND_RULE_TAG_TYPE +                $.DocumentTemplateService.token + sUniqueToken + $.DocumentTemplateService.token + oItem.id +                $.DocumentTemplateService.token + $.CommonService.getCurrentTimeStamp();          } else {            sLabel = "csdtp" + $.DocumentTemplateService.token + sTemplateType + $.DocumentTemplateService.token +                sItemType + $.DocumentTemplateService.token + $.DocumentTemplateService.DATA_AND_RULE_TAG_TYPE +                $.DocumentTemplateService.token + sUniqueToken + $.DocumentTemplateService.token + oItem.id +                $.DocumentTemplateService.token + $.CommonService.getCurrentTimeStamp();          }        } else if (sTemplateType == $.CommonService.PRODUCT_TEMPLATE_TYPE) {          sLabel = "csdtp" + $.DocumentTemplateService.token + "IT" + $.DocumentTemplateService.token +              sItemType + $.DocumentTemplateService.token + $.DocumentTemplateService.DATA_TAG_TYPE +              $.DocumentTemplateService.token + sUniqueToken + $.DocumentTemplateService.token + oItem.id +              $.DocumentTemplateService.token + $.CommonService.getCurrentTimeStamp();        }      }      return sLabel;    } catch (e) {      $.printMessage("??? ERROR : regenerateLabel -" + e.message);      throw e;    }  },  getTemplateTypeByUniqueToken: function (sUniqueToken) {    var aOpenedDocuments = app.documents;    for (var i = 0; i < aOpenedDocuments.length; i++) {      var document = aOpenedDocuments[i];      var sDocToken = document.extractLabel('uniqueToken');      if (sDocToken == sUniqueToken) {        return document.extractLabel("templateType");      }    }  },  getAllTagsOfFrame: function (oFrame) {    $.printMessage("*** getAllTagsOfFrame ***");    $.printMessage("----------------------------");    try {      var aXMLTags = [];      var oXMLElement = oFrame.associatedXMLElement;      if(!oXMLElement){        return aXMLTags;      }      if($.CommonService.isCSDTPTag(oXMLElement.markupTag.name)){        //CSDTP tag on frame, two cases are possible: 1. Frame contains table  2. Frame just contains frame level linking        oXMLElement.markupTag.insertLabel("placeholderType", $.CommonService.tagLevelFrame);        oXMLElement.markupTag.insertLabel('tagUnderElement',oFrame.extractLabel("Name"));        aXMLTags.push(oXMLElement.markupTag);        if (oFrame.constructor.name == "TextFrame" &&            oFrame.parentStory.tables.length == 1 && oFrame.extractLabel("contentType") == "flexTable") {          oXMLElement.markupTag.insertLabel("placeholderType", $.CommonService.tagLevelTableFrame);          aXMLTags = aXMLTags.concat($.CommonService.getTableTags(oFrame, 'indesignTagObjects'));        }      }      else if (oFrame.constructor.name == "TextFrame" && oFrame.parentStory.tables.length == 1) {        oXMLElement.markupTag.insertLabel("placeholderType", $.CommonService.tagLevelTableFrame);        aXMLTags = aXMLTags.concat($.CommonService.getTableTags(oFrame, 'indesignTagObjects'));      } else {        //No CSDTP tag on frame, one case possible: 1. Frame may contain inline tags        var aFrameInlineXMLElements = oXMLElement.xmlElements;        for (var j = 0; j < aFrameInlineXMLElements.length; j++) {          var oInlineMarkupTag = aFrameInlineXMLElements[j].markupTag;          if ($.CommonService.isCSDTPTag(oInlineMarkupTag.name)) {            if (!aXMLTags.contains(oInlineMarkupTag)) {              oInlineMarkupTag.insertLabel('tagUnderElement', oFrame.extractLabel("Name"));              oInlineMarkupTag.insertLabel("placeholderType", $.CommonService.tagLevelFrameInline);              aXMLTags.push(oInlineMarkupTag);            }          }        }      }      return aXMLTags;    } catch (e) {      $.printMessage("??? ERROR: getAllTagsOfFrame -" + e.message);      throw e;    }  },  saveDocumentTemplate: function (sMamFileId, sFilename, sFileExtension, sDirectoryAbsPath, bGeneratePreview) {    $.printMessage("*** saveDocumentTemplate ***")    var oResult = {};    try {      var oAPIResult = $.CommonService.getIDSNDocumentByMamFileId(sMamFileId);      if (!oAPIResult.docFound) {        throw new Error("DOC_COULD_NOT_BE_SAVED");      }      var oDocument = oAPIResult.doc;      oResult.data = {};      var sUniqueToken = oDocument.extractLabel('uniqueToken');      if (sUniqueToken != "") {        var oDocumentPreference = $.CommonService.getOriginalDocumentPreferences(oDocument);        $.CommonService.setDocumentPreferencesToPoints(oDocument);        try {          oResult.data = $.DocumentTemplateService.generateDocumentObject(oDocument, sUniqueToken);          var oProductTemplateFramesMap = $.DocumentTemplateService.getProductTemplateFramesMap(oDocument);          oDocument.viewPreferences.rulerOrigin = RulerOrigin.PAGE_ORIGIN;          oResult.data.productTemplateDimensions = this.getProductTemplateDimensions(oProductTemplateFramesMap);          oResult.data.isDTPDocument = true;          $.CommonService.setOriginalDocumentPreferences(oDocument, oDocumentPreference);        } catch (e) {          $.CommonService.setOriginalDocumentPreferences(oDocument, oDocumentPreference);          throw e;        }      }      else{        oResult.data.isDTPDocument = false;      }      var sTemplateInstanceId = oDocument.extractLabel("templateId");      if (sTemplateInstanceId == "") {        sTemplateInstanceId = $.CommonService.generateUUID();        oDocument.insertLabel("templateId", sTemplateInstanceId);      }      oResult.data.documentTemplateInstanceId = sTemplateInstanceId;      oResult.data.pages = $.DocumentTemplateService.getPageModel(oDocument);      if (bGeneratePreview) {        var previewFilePath = $.CommonService.generatePagePreviewUsingPlugin(oDocument, sFilename,            sDirectoryAbsPath + "/" + sFilename + "/");        oResult.data.previewFilePath = previewFilePath;        oResult.data.previewInfo = $.CommonService.getPreviewInfoOfDocument(oDocument);      }      oDocument.insertLabel("templateType", "DT");      oDocument.insertLabel("isMD", "true");      oDocument.save();      if (app.version.indexOf("12") === 0) {        // Parameters for package print for indesign 2017 ver. 12.        // 1.Destination:S       2.copying font:B           3.copying linked graphics:B  4.copyingProfiles:B        // 5.updatingGraphics:B  6.includingHiddenLayers:B  7.ignorePreflightErrors:B    8.creatingReport:B        // 9.includeIdml:B       10.includePdf:B            11.pdfStyle:S                12.versionComments:S        // 13. forceSave (optional):B       oDocument.packageForPrint(sDirectoryAbsPath + sFilename + "_Package", true, false, true, false,            false, true, false, false, false, "", "", true);      } else {        // Parameters for package print for indesign 2018 ver. 13.0 and above.        // 1.Destination:S       2.copying font:B           3.copying linked graphics:B  4.copyingProfiles:B        // 5.updatingGraphics:B  6.includingHiddenLayers:B  7.ignorePreflightErrors:B    8.creatingReport:B        // 9.includeIdml:B       10.includePdf:B            11.pdfStyle:S               12.useDocumentHyphenationExceptionsOnly:B        // 13.versionComments:S  14 forceSave (optional):B      oDocument.packageForPrint(sDirectoryAbsPath + sFilename + "_Package", true, false, true, false,            false, true, false, false, false, "", false, "", true);      }      //Making an additional upload copy to read the byte stream, since CEP engine can not get the byte stream of open file      //var sFolderDTPCachePath = oDocument.fullName.parent.fsName.toString().replace(/\\/g, '/');      var sUploadCopyPath = "";      if (sFileExtension == "idml") {        sUploadCopyPath = sDirectoryAbsPath + sFilename + "." + sFileExtension;        oDocument.exportFile(ExportFormat.INDESIGN_MARKUP, sUploadCopyPath, false);      } else {        sUploadCopyPath = sDirectoryAbsPath + sFilename + "." + sFileExtension;      }      oResult.data.uploadCopyPath = sUploadCopyPath;      oResult.status = "success";    } catch (e) {      $.printMessage("??? saveDocumentTemplate -" + e.message);      var error = new InDesignError(e);      oResult.message = error.getErrorMessage($.DocumentTemplateService.CLASS_NAME);      oResult.status = "failure";    }    return oResult;  },  generateDocumentObject: function (oDocument, sUniqueToken) {    var oDocInfo = {};    oDocInfo.uniqueToken = oDocument.extractLabel("uniqueToken");    oDocInfo.documentType = oDocument.extractLabel("templateType");    var oFramesToBeAdded = {};    var oPlacedSlots = {};    var aAllPageItems = oDocument.allPageItems;    var oExternalName = {};    for (var iPageItem = 0; iPageItem < aAllPageItems.length; iPageItem++) {      var oPageItem = aAllPageItems[iPageItem];      if ($.aFrameTypes.contains(oPageItem.constructor.name)) {        if (oPageItem.constructor.name == "Rectangle" && oPageItem.parent.constructor.name == "Cell") {          var sExternalName = oPageItem.extractLabel("Name");          if (sExternalName != "" && sExternalName.indexOf(sUniqueToken) == -1) {            var sFrameLabel = $.DocumentTemplateService.regenerateLabel(sUniqueToken, oPageItem);            oPageItem.insertLabel("Name", sFrameLabel);          }          continue;        }        var oFrame = $.SaveMasterDocumentAsService.populateFrame(oPageItem, sUniqueToken, oExternalName);        var sFrameId = oPageItem.extractLabel("Name");        oFramesToBeAdded[sFrameId] = oFrame;        if (oFrame.slotId && oFrame.slotId != "") {          oPlacedSlots[oFrame.slotId] = oFrame.slotId;        }      }    }    oDocInfo.frames = oFramesToBeAdded;    oDocInfo.placedSlots = oPlacedSlots;    $.printMessage("***************************************************");    $.printMessage("*** >> Placed slots >>" + JSON.stringify(oPlacedSlots));    $.printMessage("***************************************************");    return oDocInfo;  },  getProductTemplateFramesMap: function (oDocument) {    var oDimensionsMap = {};    var aAllPageItems = oDocument.allPageItems;    for (var iPageItemIndex = 0; iPageItemIndex < aAllPageItems.length; iPageItemIndex++) {      var oPageItem = aAllPageItems[iPageItemIndex];      var sSlotInfo = oPageItem.extractLabel("slotId");      if (sSlotInfo) {        var oSlotInfo = JSON.parse(sSlotInfo);        if (oDimensionsMap[oSlotInfo.slotId]) {          oDimensionsMap[oSlotInfo.slotId].push(oPageItem)        } else {          oDimensionsMap[oSlotInfo.slotId] = [];          oDimensionsMap[oSlotInfo.slotId].push(oPageItem);        }      }    }    return oDimensionsMap;  },  getProductTemplateDimensions: function (oProductTemplateFramesMap) {    var oProductTemplateDimensionsMap = {};    for (var sSlotId in oProductTemplateFramesMap) {      var oLargestandLowestXY =  $.TemplateService.getLowestLargestXYOfSelection(oProductTemplateFramesMap[sSlotId]);      var oProductTemplateDimension                = {};      oProductTemplateDimension.topLeftXCoordinate = oLargestandLowestXY.lowestX;      oProductTemplateDimension.topLeftYCoordinate = oLargestandLowestXY.lowestY;      oProductTemplateDimension.width              = oLargestandLowestXY.largestX - oLargestandLowestXY.lowestX;      oProductTemplateDimension.height             = oLargestandLowestXY.largestY - oLargestandLowestXY.lowestY;      oProductTemplateDimensionsMap[sSlotId]       = oProductTemplateDimension;    }    return oProductTemplateDimensionsMap;  },  getPageModel: function(oDocument) {    var aPagesToSave = [];    var aPages = oDocument.pages;    var originalDocPreferences = $.CommonService.getOriginalDocumentPreferences(oDocument);    $.CommonService.setDocumentPreferencesToPoints(oDocument);    for (var iPageIndex = 0; iPageIndex < aPages.length; iPageIndex++) {      var oDTPPageModel = {};      var oPage = aPages[iPageIndex];      if (oPage.parent.constructor.name === "Spread") {        var iCurrentPageIndex   = oPage.index;        var iSpreadIndex        = oPage.parent.index;        oDTPPageModel.pageIndex = oPage.documentOffset;        oDTPPageModel.pageNumber = oPage.name;        oDTPPageModel.parentSpread = oPage.parent.id;        oDTPPageModel.pageDimensions = {};        oDTPPageModel.pageDimensions.height = oPage.bounds[2] - oPage.bounds[0];        oDTPPageModel.pageDimensions.width  = oPage.bounds[3] - oPage.bounds[1];        var sWorkableArea = oPage.extractLabel("workableArea");        if (sWorkableArea) {          oDTPPageModel.workableArea = JSON.parse(sWorkableArea);        }        aPagesToSave.push(oDTPPageModel);      }    }    $.CommonService.setOriginalDocumentPreferences(oDocument, originalDocPreferences);    return aPagesToSave;  },};//--------------- END DocumentTemplateService.jsx ------------///////////////////////////////////////////////////////////////////-----------   TEMPLATE SERVICE .jsx -------------/////////////////////////////////////////////////////////////////$.TemplateService = {  getLowestLargestXYOfSelection: function (aPageItems) {    var lowestX  = aPageItems[0].geometricBounds[1];    var lowestY  = aPageItems[0].geometricBounds[0];    var largestX = aPageItems[0].geometricBounds[3];    var largestY = aPageItems[0].geometricBounds[2];    for (var i = 0; i < aPageItems.length; i++) {      var oFrame = aPageItems[i];      if (!$.CommonService.frameSelectionTypes.contains(oFrame.constructor.name)) {        continue;      }      // We need to remove the geometry info from all page items to avoid any stale information.      aPageItems[i].insertLabel("GeometryInfo", "");      if (lowestX > oFrame.geometricBounds[1]) {        lowestX = oFrame.geometricBounds[1];      }      if (lowestY > oFrame.geometricBounds[0]) {        lowestY = oFrame.geometricBounds[0];      }      if (largestX < oFrame.geometricBounds[3]) {        largestX = oFrame.geometricBounds[3];      }      if (largestY < oFrame.geometricBounds[2]) {        largestY = oFrame.geometricBounds[2];      }    }    var oResult = {      largestX: largestX,      lowestX: lowestX,      largestY: largestY,      lowestY: lowestY    };    return oResult;  },};//--------------- END TemplateService.jsx------------------------///////////////////////////////////////////////////////////////////-----------   PUBLICATION DOCUMENT SERVICE .jsx -------------/////////////////////////////////////////////////////////////////$.PublicationDocumentService = {  openPublicationDocument: function (sDocumentTemplateName, sFileName, sDocumentTemplateRepoPath, iDocumentTemplateID,                                     sImagePlacementOption) {    return $.DocumentTemplateService.openDocumentTemplate(sDocumentTemplateName, sFileName, sDocumentTemplateRepoPath, iDocumentTemplateID,sImagePlacementOption);  },  /**   * Method handles the open document call if the opened document is Production Document.   * @param oDocument   * @param sMamFileId   * @returns {{}}   */  processPublicationDocument: function (oDocument, sMamFileId) {    $.printMessage("*** processPublicationDocument ***");    var oResult = {};    var bIsDtpDocument = false;    oDocument.insertLabel('templateId', sMamFileId);    oDocument.insertLabel("isOpenedFromDTP", "true");    oDocument.insertLabel("isMD", "true");    oDocument.insertLabel("isPD", "true");    oDocument.insertLabel("isPublicationDocument", "true");    if (oDocument.extractLabel('uniqueToken') != "") {      var sUniqueToken = new Date().getTime().toString();      oDocument.insertLabel('uniqueToken', sUniqueToken);      $.SaveMasterDocumentAsService.oMapOfDtpGroups = {};      var oData = $.SaveMasterDocumentAsService.getDocumentObjectForSaveAs(oDocument, sUniqueToken);      oResult.uniqueToken = sUniqueToken;      bIsDtpDocument = true;      var oCurrentlyLinkedTagInfo = $.CommonService.createLinkedTagInfoFromDocument(oDocument);      oResult.currentlyLinkedTagInfo = oCurrentlyLinkedTagInfo;      $.PublicationDocumentService.mergeDbJsonAndLinkedInfoForProductionDocument(oData, oCurrentlyLinkedTagInfo);      oResult.dbJson = oData;    }    oResult.didProcessProductionDocument = true;    oResult.isDTPDocument = bIsDtpDocument;    //app.setSaveDocEventListenerDTP("false");    oDocument.save();   // app.setSaveDocEventListenerDTP("true");    oDocument.insertLabel("isProcessed", "true");    var oJsxResponse = {};    oJsxResponse.data = {};    oJsxResponse.data = oResult;    oJsxResponse.status = "success";    return oJsxResponse;  },  /**   * Method merges db json prepared from saveas function and linked info   * @param {json} oDbJson : Updates this by reference   * @param {json} oLinkedInfo   */  mergeDbJsonAndLinkedInfoForProductionDocument: function(oDbJson, oLinkedInfo) {    for (var sFrameId in oDbJson.frames) {      if (oDbJson.frames.hasOwnProperty(sFrameId)) {        var oFrame = oDbJson.frames[sFrameId];        for (var sPlaceholderId in oFrame.placeholders) {          if (oFrame.placeholders.hasOwnProperty(sPlaceholderId) && oLinkedInfo.hasOwnProperty(sPlaceholderId)) {            oFrame.placeholders[sPlaceholderId] = oLinkedInfo[sPlaceholderId];          }        }// for - placeholders      }    }// for - frames    if (oDbJson.groups) {      for (var sGroupId in oDbJson.groups) {        if (oDbJson.groups.hasOwnProperty(sGroupId) && oLinkedInfo.hasOwnProperty(sGroupId)) {          oDbJson.groups[sGroupId] = oLinkedInfo[sGroupId]        }      }// for - groups    }  },};//--------------- END PublicationDocumentService.jsx ------------///////////////////////////////////////////////////////////////////-----------   SAVE MASTER DOCUMENT AS SERVICE .jsx -------------/////////////////////////////////////////////////////////////////$.SaveMasterDocumentAsService = {  oMapOfDtpGroups: {},  CLASS_NAME: "SaveMasterDocumentAsService",  getDocumentObjectForSaveAs: function(oDocument, sUniqueToken) {    $.printMessage("*** getDocumentObjectForSaveAs ***");    var oDocInfo = {};    $.SaveMasterDocumentAsService.oMapOfDtpGroups = {};    oDocInfo.uniqueToken  = oDocument.extractLabel("uniqueToken");    oDocInfo.documentType = oDocument.extractLabel("templateType");    var oFramesToBeAdded  = {};    var oDTPGroupsInDoc   = {};    var aAllPageItems     = oDocument.allPageItems;    for (var iPageItem = 0; iPageItem < aAllPageItems.length; iPageItem++) {      var oPageItem = aAllPageItems[iPageItem];      if ($.aFrameTypes.contains(oPageItem.constructor.name)) {        if (oPageItem.constructor.name == "Rectangle" && oPageItem.parent.constructor.name == "Cell") {          var sExternalName = oPageItem.extractLabel("Name");          if (sExternalName != "" && sExternalName.indexOf(sUniqueToken) == -1) {            var sFrameLabel = $.DocumentTemplateService.regenerateLabel(sUniqueToken, oPageItem);            oPageItem.insertLabel("Name", sFrameLabel);          }          continue;        }        var oFrame = this.populateFrame(oPageItem, sUniqueToken);        var sFrameId = oPageItem.extractLabel("Name");        oFramesToBeAdded[sFrameId] = oFrame;      }    }    for (var sOldGroupName in $.SaveMasterDocumentAsService.oMapOfDtpGroups) {      var sNewGroupName = $.SaveMasterDocumentAsService.oMapOfDtpGroups[sOldGroupName];      oDTPGroupsInDoc[sNewGroupName] = {};      oDTPGroupsInDoc[sNewGroupName].slotId = sNewGroupName;    }    $.CommonService.writeFrameIdInAllFrames(oDocument, sUniqueToken);    oDocInfo.frames = oFramesToBeAdded;    oDocInfo.placedSlots = oDTPGroupsInDoc;    return oDocInfo;  },  /**populateFrame() - 1. Prepares the frame JSON object for DB in case of normal frame (not itcf or itif)   * @param oFrame - Indesign Frame object   * @param sUniqueToken   * @param oPage   * @param oDocument   * @returns {{}}   */  populateFrame: function (oFrame, sUniqueToken) {    var sConstructorName = oFrame.constructor.name;    if ($.aFrameTypes.contains(sConstructorName)) {      var oFrameInfo = {};      oFrameInfo.layerName = oFrame.itemLayer.name;      oFrame.insertLabel("LayerName", oFrame.itemLayer.name);      var sNewFrameName = $.DocumentTemplateService.regenerateLabel(sUniqueToken, oFrame);      oFrame.insertLabel("Name", sNewFrameName);      oFrameInfo.frameId = sNewFrameName;      var oDtpGroupInfo = $.CommonService.getSlotInfo(oFrame);      $.printMessage("*** >>> DTP group info >>>>" + JSON.stringify(oDtpGroupInfo));      if (oDtpGroupInfo.slotFound) {        var slotId = oDtpGroupInfo.slotId;        if (!$.SaveMasterDocumentAsService.oMapOfDtpGroups.hasOwnProperty(slotId)) {          $.SaveMasterDocumentAsService.oMapOfDtpGroups[slotId] = slotId;        }        var oDtpGroup = oDtpGroupInfo.slotInfo;        oFrameInfo.slotId = $.SaveMasterDocumentAsService.oMapOfDtpGroups[slotId];        oDtpGroup.slotId = $.SaveMasterDocumentAsService.oMapOfDtpGroups[slotId];        oDtpGroup.id = $.SaveMasterDocumentAsService.oMapOfDtpGroups[slotId];        oFrame.insertLabel("slotId", JSON.stringify(oDtpGroup));      }      var aXMLTags = $.DocumentTemplateService.getAllTagsOfFrame(oFrame);      var oTagsToBeAdded = {};      if (aXMLTags.length > 0) {        for (var i = 0; i < aXMLTags.length; i++) {          if ($.CommonService.isCSDTPTag(aXMLTags[i].name)) {            var oXMLTag = $.SaveMasterDocumentAsService.populateTag(aXMLTags[i], sUniqueToken, oFrame);            oTagsToBeAdded[oXMLTag.placeholderId] = oXMLTag;            //Remove stale slotIds in tagInfo and write back            var oTagInfo = JSON.parse(oFrame.extractLabel(oXMLTag.placeholderId));            if (oTagInfo.slotId && !oDtpGroupInfo.slotFound) {              delete oTagInfo.slotId;            }            oFrame.insertLabel(oXMLTag.placeholderId, JSON.stringify(oTagInfo));          }        }        oFrame.insertLabel("isLinked", "true");      } else {        oFrame.insertLabel("isLinked", "false");      }      oFrameInfo.placeholders = oTagsToBeAdded;      return oFrameInfo;    }  },  /**populateTag() - Creates and returns the JSON object with tag details to be inserted in DB JSON structure   * @param oXMLTag - Indesign XML Tag object   * @returns {{externalId: *, externalName: *}}   */  populateTag: function (oXMLTag, sUniqueToken, oFrame) {    var sOldName      = oXMLTag.name;    oXMLTag.name      = $.DocumentTemplateService.regenerateLabel(sUniqueToken, oXMLTag);    $.CommonService.copyTheLinkedInfoFromOldTag(oFrame, sOldName, oXMLTag.name);    var oTag = {};    if (oFrame.extractLabel(oXMLTag.name) !== "") {        oTag = JSON.parse(oFrame.extractLabel(oXMLTag.name));    }    delete oTag.slotId;    oTag.placeholderId   = oXMLTag.name;    oTag.placeholderType = oXMLTag.extractLabel('placeholderType');    return oTag;  }};//--------------- END SaveMasterDocumentAsService.jsx ------------/////////////////////////////////////////////////////////////////------------ TAGGED TEXT UTILS.JSX  --------------------------///////////////////////////////////////////////////////////////$.TaggedTextUtils = {  oMapOfDtpGroups: {},  CLASS_NAME: "TaggedTextUtils",  /**   * This function return info needed to place a multi-line text on the frame.   * @param sTagData: Tag details   * @returns {string}   */  getFormattedContentForMultiLineAttribute: function (oTagData) {    var oResult  = {};    oResult.data = {};    var sXmlContent = null;    try {      if (app.textExportPreferences.platform == ImportPlatform.MACINTOSH) {        sXmlContent = '<ASCII-MAC>';      } else {        sXmlContent = '<ASCII-WIN>';      }      var fVersion = parseFloat(app.version);      sXmlContent += '<Version:'+ fVersion +'>';      var sFeatureSet = "";      switch (app.featureSet){        case FeatureSetOptions.ROMAN :          sFeatureSet = "Roman";          break;        case FeatureSetOptions.RIGHTTOLEFT :          sFeatureSet = "RIGHTTOLEFT";          break;        case FeatureSetOptions.JAPANESE :          sFeatureSet = "JAPANESE";          break;        default :          sFeatureSet = app.featureSet;          break;      }      sXmlContent += '<FeatureSet:InDesign-' + sFeatureSet + '>';      var iCountOfSpecialTag = oTagData.tagNames.length;      for (var iSpecialTagIndex = 0; iSpecialTagIndex < iCountOfSpecialTag; iSpecialTagIndex++) {        var sTagName = oTagData.tagNames[iSpecialTagIndex];        if (oTagData.tagDetails[sTagName] && oTagData.tagDetails[sTagName].isLabel) {          continue;        }        var sFilePath                       = oTagData.tagDetails[sTagName].filePath;        var sSpecialContent                 = decodeURIComponent(oTagData.tagDetails[sTagName].data);        var sContentType                    = oTagData.tagDetails[sTagName].contentType;        var bShouldCreatePlaceholders       = oTagData.tagDetails[sTagName].shouldCreatePlaceholders;        var oSpecialContent                 = $.TaggedTextUtils.handleSpecialContentAndWriteInFile(sSpecialContent,            sFilePath, sXmlContent, sContentType,            bShouldCreatePlaceholders);        if (oSpecialContent.cellInfo) {          oResult.data[sTagName] = oSpecialContent.cellInfo;        }        oTagData.tagDetails[sTagName].doesParaStyleExists = oSpecialContent.doesParaStyleExists;      }      oResult.tagDetails = oTagData.tagDetails;      oResult.status = "success";    } catch (e) {      var error = new InDesignError(e);      oResult.message = error.getErrorMessage($.TaggedTextUtils.CLASS_NAME);      oResult.status = "failure";    }    return JSON.stringify(oResult);  },  handleSpecialContentAndWriteInFile: function (sSpecialContent, sFilePath, sXmlContent, sContentType, bShouldCreatePlaceholders) {    sSpecialContent = sSpecialContent.replace("%!TT", "");    // If content is empty then don't write it in file.    var oContents = {};    if (sFilePath != "") {      var oFile = new File(sFilePath);      oFile.open("w");      // In this we are adding new line character after ascii details tag.      var rgxForInDesignDetails = new RegExp("<ASCII-.*?>");      var aAsciiDetailsTag      = sXmlContent.match(rgxForInDesignDetails);      sXmlContent               = sXmlContent.replace(aAsciiDetailsTag[0], aAsciiDetailsTag[0] + "\n");      oContents                 = $.TaggedTextUtils.formatSpecialContentAndDefineStylesForTheContents(sSpecialContent,          sContentType, bShouldCreatePlaceholders);      var sUpdateSpecialContent = $.TaggedTextUtils.replaceSpecialCharsWithHexCode(oContents.contentWithDefinedStyles);      var sFormattedContent     = sXmlContent + sUpdateSpecialContent;      oFile.write(sFormattedContent);      oFile.close();    }    return oContents;  },  formatSpecialContentAndDefineStylesForTheContents: function (sContent, sContentType, bShouldCreatePlaceholders) {    var oContents = {};    try {      //NOTE: Add additional/missing InDesign tags found in tagged text received from PHP here      var aAllTags = ["<TableStyle:.*?>", "<TableStart:.*?>>", "<TableStart:.*?>", "<ColStart:.*?>>", "<RowStart:.*?>>",                      "<RowStart:>", "<CellStyle:.*?>",                      "<StylePriority:.*?>", "<CellStart:.*?>", "<CellEnd:>", "<RowEnd:>", "<TableEnd:>",                      "<pSpaceBefore:.*?>", "<pSpaceAfter:.*?>", "<pLeftIndent:.*?>", "<pFirstLineIndent:.*?>",                      "<bnListType:.*?>"];      var sData                      = sContent;      var rgxForW2Tag                = new RegExp("<w2:(.*?)>", "g");      var rgxForInTag                = new RegExp("<in:(.*?)>", "g");      var sReplacementForGreaterThan = "GREATER_THAN";      var regForGreaterThan          = new RegExp(sReplacementForGreaterThan, "g");      var sReplacementForSmallerThan = "SMALLER_THAN";      var regForSmallerThan          = new RegExp(sReplacementForSmallerThan, "g");      var sReplacementZeroWidthSpace = "ZERO_WIDTH_SPACE";      var sReplacementForNewLine     = "NEW_LINE";      //Replace all nl tags with \n.      sData = sData.replace(new RegExp("<nl:>", "g"), "\n");      sData = sData.replace(new RegExp("<0x200B>", "g"), sReplacementZeroWidthSpace);      sData = sData.replace(new RegExp("<0x000A>", "g"), sReplacementForNewLine);      //preparing data for creating inline tags in flex tables      if (sContentType == "flextable" && bShouldCreatePlaceholders) {        oContents.cellInfo = {};        var rgxForCellTag = new RegExp("<CellStart:(.*?)>(.*?)<CellEnd:>", "g");        var aCellTags = sData.match(rgxForCellTag);        for (var iCellTagCount = 0; iCellTagCount < aCellTags.length; iCellTagCount++) {          var aW2Tags = aCellTags[iCellTagCount].match(rgxForW2Tag);          if (aW2Tags != null) {            aW2Tags[0] = aW2Tags[0].replace(/ /g,'');            aW2Tags[0] = aW2Tags[0].replace("<w2:", "");            var aTagInfo = aW2Tags[0].split(",");            oContents.cellInfo[iCellTagCount] = {};            oContents.cellInfo[iCellTagCount].attributeId = aTagInfo[0];            oContents.cellInfo[iCellTagCount].itemId      = aTagInfo[1];            oContents.cellInfo[iCellTagCount].class       = parseInt(aTagInfo[2]);            oContents.cellInfo[iCellTagCount].shareId     = aTagInfo[3];          } else {            var aInTags = aCellTags[iCellTagCount].match(rgxForInTag);            if (aInTags != null) {              aInTags[0] = aInTags[0].replace(/ /g,'');              aInTags[0] = aInTags[0].replace("<in:", "");              var aTagInfo = aInTags[0].split(",");              oContents.cellInfo[iCellTagCount] = {};              oContents.cellInfo[iCellTagCount].attributeId = aTagInfo[2];              oContents.cellInfo[iCellTagCount].itemId      = aTagInfo[3];              oContents.cellInfo[iCellTagCount].class       = parseInt(aTagInfo[4]);              oContents.cellInfo[iCellTagCount].shareId     = aTagInfo[5];            }          }        }      }      //Removing W2 tag from the content.      sData       = sData.replace(new RegExp("</w2>", "g"), "");      var aW2Tags = sData.match(rgxForW2Tag);      var iNumberOfW2Tags = aW2Tags ? aW2Tags.length : 0;      for (var iW2TagCount = 0; iW2TagCount < iNumberOfW2Tags; iW2TagCount++) {        sData = sData.replace(aW2Tags[iW2TagCount], "");      }      //Removing <in> tag from the content.      sData       = sData.replace(new RegExp("</in>", "g"), "");      var aInTags = sData.match(rgxForInTag);      var iNumberOfInTags = aInTags ? aInTags.length : 0;      for (var iInTagCount = 0; iInTagCount < iNumberOfInTags; iInTagCount++) {        sData = sData.replace(aInTags[iInTagCount], "");      }      //** START extracting table style for the content to define paragraph style **//      var oTableStyleDetails = $.TaggedTextUtils.formatTableStyleContentAndDefineStyle(sData);      var iNumberTableStyles = oTableStyleDetails ? oTableStyleDetails.numberOfTableStyles : 0;      var aDefinedTableStyle = oTableStyleDetails ? oTableStyleDetails.definedTableStyles : "";      sData                  = oTableStyleDetails ? oTableStyleDetails.data : sData;      //** START extracting character style for the content to define character style **//      var oCharacterStyleDetails = $.TaggedTextUtils.formatCharacterStyleContentAndDefineStyle(sData);      var aDefinedCharStyle      = oCharacterStyleDetails ? oCharacterStyleDetails.definedCharacterStyle : "";      sData                      = oCharacterStyleDetails ? oCharacterStyleDetails.data : sData;      // END Done extracting character style.      //** START extracting paragraph style for the content to define paragraph style **//      var oParagraphStyleDetails = $.TaggedTextUtils.formatParagraphStyleContentAndDefineStyle(sData,          iNumberTableStyles);      var aDefinedParaStyle      = oParagraphStyleDetails ? oParagraphStyleDetails.definedParagraphStyle : "";      sData                      = oParagraphStyleDetails ? oParagraphStyleDetails.data : sData;      var bDoesParaStyleExists   = oParagraphStyleDetails.doesParaStyleExists;      // END Done extracting para style.      //Replace all tag opening and closing with special string.      var iAllTagsCount = aAllTags.length;      var aMatchedTags = [];      for(var iAllTagsIndex = 0; iAllTagsIndex < iAllTagsCount; iAllTagsIndex++){        var rgxForTag = new RegExp(aAllTags[iAllTagsIndex],"g");        var aTemp = sData.match(rgxForTag);        if(aTemp && aTemp.length){          aMatchedTags = aMatchedTags.concat(aTemp);        }      }      var iNumberOfTags = aMatchedTags ? aMatchedTags.length : 0;      if (iNumberOfTags) {        for (var iTagsCount = 0; iTagsCount < iNumberOfTags; iTagsCount++) {          //Replace "<" and ">" of character style with special string          var sReplacedContent = aMatchedTags[iTagsCount].replace(new RegExp("<", "g"), sReplacementForSmallerThan);          sReplacedContent = sReplacedContent.replace(new RegExp(">", "g"), sReplacementForGreaterThan);          sData = sData.replace(aMatchedTags[iTagsCount], sReplacedContent);        }      }      //We have to add this handling because of server side at CS "< " is replaced with "\< ".      while (sData.indexOf("\\<") != -1) {        sData = sData.replace("\\<", "<")      }      //Escaping all extra "<" and ">"      sData = sData.replace(new RegExp("<", "g"), "\\<");      sData = sData.replace(new RegExp(">", "g"), "\\>");      //Replace special string with "<" and ">"      sData = sData.replace(regForGreaterThan, ">");      sData = sData.replace(regForSmallerThan, "<");      sData = sData.replace(new RegExp("\xa0", "g"), "<0x00A0>");//replacing non breaking space with hash code.      sData = sData.replace(new RegExp(sReplacementZeroWidthSpace, "g"), "<0x200B>");      sData = sData.replace(new RegExp(sReplacementForNewLine, "g"), "<0x000A>");      // END Done extracting para style.      var sFormattedContent = aDefinedCharStyle + aDefinedParaStyle + aDefinedTableStyle + sData;      oContents.contentWithDefinedStyles = sFormattedContent;      oContents.doesParaStyleExists      = bDoesParaStyleExists;      return oContents;    } catch (e) {      throw e;    }  },  formatTableStyleContentAndDefineStyle: function (sData) {    var oTableStyleDetails         = {};    var aDefinedTableStyle         = "";    var rgxForTableStyle           = new RegExp("<TableStyle:.*?>", "g");    var aTableStyles               = sData.match(rgxForTableStyle);    var iNumberTableStyles         = aTableStyles ? aTableStyles.length : 0;    var aTableStyleCollection      = [];    var sReplacementForGreaterThan = "GREATER_THAN";    var sReplacementForSmallerThan = "SMALLER_THAN";    if (iNumberTableStyles) {      for (var iTableStyleCount = 0; iTableStyleCount < iNumberTableStyles; iTableStyleCount++) {        var sTableStyle = aTableStyles[iTableStyleCount].replace("<TableStyle:", "");        sTableStyle     = sTableStyle.replace(">", "");        if (sTableStyle != "" && !aTableStyleCollection.contains(sTableStyle)) {          aTableStyleCollection.push(sTableStyle);        }        //Replace "<" and ">" of character style with special string        var sReplacedContent = aTableStyles[iTableStyleCount].replace("<", sReplacementForSmallerThan);        sReplacedContent     = sReplacedContent.replace(">", sReplacementForGreaterThan);        sData                = sData.replace(aTableStyles[iTableStyleCount], sReplacedContent);      }      iNumberTableStyles = aTableStyleCollection.length;      for (var iTableStyleCount = 0; iTableStyleCount < iNumberTableStyles; iTableStyleCount++) {        aDefinedTableStyle += "<DefineTableStyle:" + aTableStyleCollection[iTableStyleCount] + "=<Nextstyle:"            + aTableStyleCollection[iTableStyleCount] + ">>";      }    }    oTableStyleDetails.numberOfTableStyles = iNumberTableStyles;    oTableStyleDetails.definedTableStyles  = aDefinedTableStyle;    oTableStyleDetails.data                = sData;    return oTableStyleDetails  },  formatCharacterStyleContentAndDefineStyle: function (sData) {    var oCharacterStyleDetails     = {};    var rgxForCharStyle            = new RegExp("<CharStyle:(.*?)>", "g");    var aCharacterStyles           = sData.match(rgxForCharStyle);    var iNumberCharacterStyles     = aCharacterStyles ? aCharacterStyles.length : 0;    var aCharacterStyleCollection  = [];    var aDefinedCharStyle          = "";    var sReplacementForGreaterThan = "GREATER_THAN";    var sReplacementForSmallerThan = "SMALLER_THAN";    if (iNumberCharacterStyles) {      for (var iCharacterStyleCount = 0; iCharacterStyleCount < iNumberCharacterStyles; iCharacterStyleCount++) {        var sCharacterStyle = aCharacterStyles[iCharacterStyleCount].replace("<CharStyle:", "");        sCharacterStyle     = sCharacterStyle.replace(">", "");        if (sCharacterStyle != "" && !aCharacterStyleCollection.contains(sCharacterStyle)) {          aCharacterStyleCollection.push(sCharacterStyle);        }        //Replace "<" and ">" of character style with special string        var sReplacedContent = aCharacterStyles[iCharacterStyleCount].replace("<", sReplacementForSmallerThan);        sReplacedContent     = sReplacedContent.replace(">", sReplacementForGreaterThan);        sData                = sData.replace(aCharacterStyles[iCharacterStyleCount], sReplacedContent);      }      iNumberCharacterStyles = aCharacterStyleCollection.length;      var aCharStyleFullNames = $.CommonService.getAllCharStyles();      for (var iCharacterStyleCount = 0; iCharacterStyleCount < iNumberCharacterStyles; iCharacterStyleCount++) {        var sCharStyleFullName = aCharacterStyleCollection[iCharacterStyleCount];        if ( !aCharStyleFullNames.contains(sCharStyleFullName) ) {          aDefinedCharStyle += "<DefineCharStyle:" + sCharStyleFullName + "=<Nextstyle:" + sCharStyleFullName + ">>";        }      }    }    oCharacterStyleDetails.definedCharacterStyle = aDefinedCharStyle;    oCharacterStyleDetails.data                  = sData;    return oCharacterStyleDetails;  },  formatParagraphStyleContentAndDefineStyle: function (sData, iNumberTableStyles) {    var oParagraphStyleDetails     = {};    var rgxForParaStyle            = new RegExp("<ParaStyle:(.*?)>", "g");    var aParagraphStyles           = sData.match(rgxForParaStyle);    var iNumberParagraphStyles     = aParagraphStyles ? aParagraphStyles.length : 0;    var aParagraphStyleCollection  = [];    var aDefinedParaStyle          = "";    var sReplacementForGreaterThan = "GREATER_THAN";    var sReplacementForSmallerThan = "SMALLER_THAN";    var bDoesParaStyleExists       = false;    if (iNumberParagraphStyles) {      for (var iParagraphStyleCount = 0; iParagraphStyleCount < iNumberParagraphStyles; iParagraphStyleCount++) {        var sParagraphStyle = aParagraphStyles[iParagraphStyleCount].replace("<ParaStyle:", "");        sParagraphStyle     = sParagraphStyle.replace(">", "");        if (sParagraphStyle != "" && !aParagraphStyleCollection.contains(sParagraphStyle)) {          aParagraphStyleCollection.push(sParagraphStyle);        }        //Replace "<" and ">" of character style with special string        if (iParagraphStyleCount > 0 && iNumberTableStyles == 0) {          sData = sData.replace(aParagraphStyles[iParagraphStyleCount], "\n" + aParagraphStyles[iParagraphStyleCount]);        }        var sReplacedContent = aParagraphStyles[iParagraphStyleCount].replace("<", sReplacementForSmallerThan);        sReplacedContent     = sReplacedContent.replace(">", sReplacementForGreaterThan);        sData                = sData.replace(aParagraphStyles[iParagraphStyleCount], sReplacedContent);      }      iNumberParagraphStyles = aParagraphStyleCollection.length;      var aParaStyleFullNames = $.CommonService.getAllParaStyles();      for (var iParagraphStyleCount = 0; iParagraphStyleCount < iNumberParagraphStyles; iParagraphStyleCount++) {        var sParaStyleFullName = aParagraphStyleCollection[iParagraphStyleCount];        if( !aParaStyleFullNames.contains(sParaStyleFullName) ) {          aDefinedParaStyle += "<DefineParaStyle:" + sParaStyleFullName + "=<Nextstyle:" + sParaStyleFullName + ">>";        } else {          bDoesParaStyleExists = true;        }      }    }    oParagraphStyleDetails.definedParagraphStyle = aDefinedParaStyle;    oParagraphStyleDetails.data                  = sData;    oParagraphStyleDetails.doesParaStyleExists   = bDoesParaStyleExists;    return oParagraphStyleDetails;  },  replaceSpecialCharsWithHexCode: function (sData) {    try {      var sResultStr = "";      var iLength    = sData.length;      for (var iCharacterCount = 0; iCharacterCount < iLength; iCharacterCount++) {        var traversedChar              = sData[iCharacterCount];        var sCheckAlphabetOrNumberRegX = /^[0-9a-zA-Z]+$/;        if (traversedChar.match(sCheckAlphabetOrNumberRegX)) {          sResultStr += sData[iCharacterCount];          continue;        }        if (traversedChar == " " || traversedChar == "\n") {          sResultStr += sData[iCharacterCount];          continue;        }        if (traversedChar.charCodeAt(0) >= 32 && traversedChar.charCodeAt(0) <= 127) {          sResultStr += sData[iCharacterCount];          continue;        }        //This character needs to be replaced with its hex value        sResultStr += $.TaggedTextUtils.convertCharToHex(traversedChar);      }      return sResultStr;    } catch (e) {      throw e;    }  },  convertCharToHex: function (character) {    var iC_Ascii = character.charCodeAt(0);    var aBit16   = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];    var sHexStr  = "<0x";    //Create the binary string for the input character    for (var iPos = 15; iPos >= 0; --iPos) {      if (iC_Ascii % 2) {        aBit16[iPos] = '1';      }      iC_Ascii = Math.floor(iC_Ascii / 2);    }    //Convert the binary array into hex string format for tag text    for (var iBitGroupCount = 0; iBitGroupCount < 16; iBitGroupCount = iBitGroupCount + 4) {      var hexVar    = 0;      var iBitCount = 0;      while (iBitCount <= 3) {        hexVar = hexVar + (aBit16[iBitGroupCount + iBitCount] == '0' ? 0 : 1) * Math.pow(2, 3 - iBitCount);        iBitCount++;      }      switch (hexVar) {        case 10:          sHexStr += 'A';          break;        case 11:          sHexStr += 'B';          break;        case 12:          sHexStr += 'C';          break;        case 13:          sHexStr += 'D';          break;        case 14:          sHexStr += 'E';          break;        case 15:          sHexStr += 'F';          break;        default:          sHexStr += hexVar.toString();      }    }    sHexStr += ">";    return sHexStr;  }}//------------- END TaggedTextUtils.jsx-------------------------////////////////////////////////////////////////////------------ UTILTIY functions -------------------------------//////////////////////////////////////////////////$.printMessage = function (sMessage) {  app.consoleout(sMessage);};$.generatePreview = function (sMessage, sSrcFilePath, sDestFilePath) {  app.consoleout(sMessage);  var document = app.open(File(sSrcFilePath));  document.exportFile(ExportFormat.pdfType, File(sDestFilePath));};Array.prototype.contains = function (item) {  for (var index in this) {    if (this[index] == item) {      return true;    }  }  return false;};function InDesignError (oException, code) {  this.message = oException;  this.code = code;}InDesignError.prototype = {  error: function () {    return buildError(this.code, this.message);  },  toString: function () {    var errorObj = this.message;    var message = '{"error": "true"' +        (errorObj.name ? ',"Name": "' + errorObj.name.replace(/"/g, '\\"') + '" \n' : '"null"')        + (errorObj.message ? ',"Message": "' + errorObj.message.replace(/"/g, '\\"') + '" \n' : '"null"')        + (errorObj.fileName ? ',"FileName": "' + errorObj.fileName.replace(/"/g, '\\"') + '" \n' : '"null"')        + (errorObj.line ? ',"Line": ' + errorObj.line + ' \n' : '"null"')        + '}';    return message;  },  getErrorMessage: function (sourceFile) {    var sMessage = 'Exception occurred in file: ' + sourceFile + ' at line: ' + this.message.line +        '. Exception message: ' + this.message.message + '.';    return sMessage;  }};function buildError (code, message) {  var errorObjectStart = '{"error" : {';  var errorObjectEnd = '}}';  var errorCode = '"code":';  var errorMessage = '"message":';  var separator = ',';  return errorObjectStart + errorCode + code + separator + errorMessage + message + errorObjectEnd;  // Example - return something like below  //return '{"error" : {"code":"ST1", "message":"Invalid operation - Please select frames on one Page."}}';}var JSON = JSON || {};// ----- JSON METHODS --------JSON.stringify = JSON.stringify || function (obj) {  var t = typeof (obj);  if (t != "object" || obj === null) {    // simple data type    if (t == "string") obj = '"' + obj + '"';    return String(obj);  }  else {    // recurse array or object    var n, v, json = [], arr = (obj && obj.constructor == Array);    for (n in obj) {      v = obj[n];      t = typeof(v);      //alert(v.toSource() + "   " + v.constructor.name + "   "  + t)      if (v == undefined || v == null || v == "null" || v == "undefined") {        continue;      }      if (v.constructor.name == 'Function') {        continue;      }      if (t == "string") {        v = '"' + v + '"';      }      else if (t == "object" && v !== null) {        v = JSON.stringify(v);      }      json.push((arr ? "" : '"' + n + '":') + String(v));    }    return (arr ? "[" : "{") + String(json) + (arr ? "]" : "}");  }};// implement JSON.parse de-serializationJSON.parse = JSON.parse || function (str) {  if (str === "") str = '""';  eval("var p=" + str + ";");  return p;};//////////////////////////////////////////////////////////////////////////-----------------  STARTING POINT -------------------------////////////////////////////////////////////////////////////////////////(function () {  if (app.scriptArgs.isDefined("functionName")) {    var sFunctionName = app.scriptArgs.getValue("functionName");    var sFunctionArgs = app.scriptArgs.getValue("functionArgs");    app.consoleout(sFunctionArgs);    var fFunctionToExecute = $[sFunctionName];    var aFunctionArgs = sFunctionArgs.split(";");    $.printMessage("function args-"+aFunctionArgs);    fFunctionToExecute.apply(this, aFunctionArgs);  }})();result;