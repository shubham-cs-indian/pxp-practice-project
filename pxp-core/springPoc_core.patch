diff --git a/src/main/java/com/cs/postgre/get/GetArticleInstanceByIdPostgre.java b/src/main/java/com/cs/postgre/get/GetArticleInstanceByIdPostgre.java
index 495d08a..b81a890 100644
--- a/src/main/java/com/cs/postgre/get/GetArticleInstanceByIdPostgre.java
+++ b/src/main/java/com/cs/postgre/get/GetArticleInstanceByIdPostgre.java
@@ -1,17 +1,25 @@
 package com.cs.postgre.get;
 
+
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.util.ArrayList;
 import java.util.List;
 
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.jdbc.core.JdbcTemplate;
 import org.springframework.stereotype.Component;
 
 import com.cs.core.util.ResultSetUtils;
 import com.cs.exception.base.CSException;
+import com.cs.jackson.ObjectMapperUtil;
 import com.cs.postgre.constant.ArticleInstanceQueryConstants;
+import com.cs.postgre.rowmapper.KlassInstanceRowMapper;
+import com.cs.postgre.util.ArticleDataBaseQuery;
 import com.cs.postgre.util.DatabaseConnection;
 import com.cs.postgre.util.PostgreConnectionDetails;
+import com.cs.postgre.util.PostgreSearchAPIUtil;
+import com.cs.runtime.interactor.entity.ArticleInstance;
 import com.cs.runtime.interactor.entity.AttributeInstance;
 import com.cs.runtime.interactor.entity.TagInstance;
 import com.cs.runtime.interactor.entity.klassinstance.IArticleInstance;
@@ -19,10 +27,14 @@ import com.cs.runtime.interactor.model.IGetInstanceRequestStrategyModelForCustom
 import com.cs.runtime.interactor.model.templating.GetKlassInstanceForCustomTabModel;
 import com.cs.runtime.interactor.model.templating.IGetKlassInstanceCustomTabModel;
 import com.cs.runtime.store.strategy.templating.IGetArticleInstanceForCustomTabStrategy;
+import com.fasterxml.jackson.core.JsonProcessingException;
 
 @Component
 public class GetArticleInstanceByIdPostgre implements IGetArticleInstanceForCustomTabStrategy {
   
+  @Autowired
+  JdbcTemplate jdbcTemplate;
+  
   @Override
   public IGetKlassInstanceCustomTabModel execute(IGetInstanceRequestStrategyModelForCustomTab model)
       throws Exception
@@ -67,12 +79,23 @@ public class GetArticleInstanceByIdPostgre implements IGetArticleInstanceForCust
       resultSet.close();
     }
     
+    getArticleInstance(model.getId());
+    
     IGetKlassInstanceCustomTabModel returnModel = new GetKlassInstanceForCustomTabModel();
     returnModel.setKlassInstance(articleInstance);
     
     return returnModel;
   }
   
+  private void getArticleInstance(String id) throws JsonProcessingException
+  {
+    String articleGetQuery = ArticleDataBaseQuery.ARTICLE_GET;
+
+    ArticleInstance resultString = jdbcTemplate.queryForObject(articleGetQuery, new Object[] {id}, new KlassInstanceRowMapper());
+    
+      System.out.println("--->>"+ ObjectMapperUtil.writeValueAsString(resultString));
+  }
+  
   /*@SuppressWarnings("rawtypes")
   @Override
   public IGetKlassInstanceTreeModel execute(IGetKlassInstanceTreeStrategyModel model)
diff --git a/src/main/java/com/cs/postgre/rowmapper/KlassInstanceRowMapper.java b/src/main/java/com/cs/postgre/rowmapper/KlassInstanceRowMapper.java
new file mode 100644
index 0000000..d362de8
--- /dev/null
+++ b/src/main/java/com/cs/postgre/rowmapper/KlassInstanceRowMapper.java
@@ -0,0 +1,89 @@
+package com.cs.postgre.rowmapper;
+
+import java.sql.Array;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+import org.springframework.jdbc.core.RowMapper;
+
+import com.cs.jackson.ObjectMapperUtil;
+import com.cs.runtime.interactor.entity.ArticleInstance;
+import com.cs.runtime.interactor.entity.ContentIdentifier;
+import com.cs.runtime.interactor.entity.IdAndVersionId;
+import com.cs.runtime.interactor.entity.LanguageAndVersionId;
+import com.cs.runtime.interactor.entity.MessageInformation;
+import com.cs.runtime.interactor.entity.RuleViolation;
+import com.cs.runtime.interactor.entity.summary.KlassInstanceVersionSummary;
+import com.cs.runtime.interactor.entity.variants.ContextInstance;
+import com.fasterxml.jackson.core.type.TypeReference;
+
+public class KlassInstanceRowMapper implements RowMapper<ArticleInstance> {
+  
+  @Override
+  public ArticleInstance mapRow(ResultSet rs, int rowNum) throws SQLException
+  {
+    ArticleInstance articleInstance = new ArticleInstance();
+    try {
+      articleInstance.setId(rs.getString(1));
+      articleInstance.setBaseType(rs.getString(2));
+      articleInstance.setTypes(convertArrayToList(rs.getArray(3)));
+      articleInstance.setTaxonomyIds(convertArrayToList(rs.getArray(4)));
+      articleInstance.setSelectedTaxonomyIds(convertArrayToList(rs.getArray(5)));
+      articleInstance.setOrganizationId(rs.getString(6));
+      articleInstance.setPhysicalCatalogId(rs.getString(7));
+      articleInstance.setLogicalCatalogId(rs.getString(8));
+      articleInstance.setSystemId(rs.getString(9));
+      articleInstance.setEndpointId(rs.getString(10));
+      articleInstance.setOriginalInstanceId(rs.getString(11));
+      articleInstance.setDefaultAssetInstanceId(rs.getString(12));
+      articleInstance.setCloneOf(rs.getString(13));
+      articleInstance.setVersionOf(rs.getString(14));
+      articleInstance.setKlassInstanceId(rs.getString(15));
+      articleInstance.setParentId(rs.getString(16));
+      articleInstance.setPath(convertArrayToList(rs.getArray(17)));
+      articleInstance.setVariants(convertArrayToList(rs.getArray(18)));
+      articleInstance.setAttributeVariants(ObjectMapperUtil.readValue(rs.getString(19), new TypeReference<List<IdAndVersionId>>()
+          {
+          }));
+      articleInstance.setLanguageInstances(
+          ObjectMapperUtil.readValue(rs.getString(20),new TypeReference<List<LanguageAndVersionId>>()
+          {
+          }));
+      articleInstance.setLanguageCodes(convertArrayToList(rs.getArray(21)));
+      articleInstance.setCreationLanguage(rs.getString(22));
+      articleInstance.setRuleViolation(
+          ObjectMapperUtil.readValue(rs.getString(23), new TypeReference<List<RuleViolation>>()
+          {
+          }));
+      articleInstance.setMessages(ObjectMapperUtil.readValue(rs.getString(24), MessageInformation.class));
+      articleInstance.setContext(ObjectMapperUtil.readValue(rs.getString(25), ContextInstance.class));
+      articleInstance.setSummary(ObjectMapperUtil.readValue(rs.getString(26), KlassInstanceVersionSummary.class));
+      articleInstance.setPartnerSources(
+          ObjectMapperUtil.readValue(rs.getString(27), new TypeReference<List<ContentIdentifier>>()
+          {
+          }));
+      articleInstance.setRelationships(convertArrayToList(rs.getArray(28)));
+      articleInstance.setNatureRelationships(convertArrayToList(rs.getArray(29)));
+      articleInstance.setIsEmbedded(rs.getBoolean(30));
+      // articleInstance.setSaveComment(31);
+      articleInstance.setVersionId(rs.getLong(32));
+      articleInstance.setVersionTimestamp(rs.getTimestamp(33).getTime());
+      articleInstance.setCreatedBy(rs.getString(34));
+      articleInstance.setCreatedOn(rs.getTimestamp(35).getTime());
+      articleInstance.setLastModifiedBy(rs.getString(36));
+      articleInstance.setLastModified(rs.getTimestamp(37).getTime());
+    }
+    catch ( Exception e) {
+      e.printStackTrace();
+    }
+    return articleInstance;
+  }
+  
+  private List<String> convertArrayToList(Array array) throws SQLException
+  {
+    return array == null ? new ArrayList<>() : Arrays.asList((String[]) array.getArray());
+  }
+}
diff --git a/src/main/java/com/cs/postgre/util/ArticleDataBaseQuery.java b/src/main/java/com/cs/postgre/util/ArticleDataBaseQuery.java
new file mode 100644
index 0000000..d2dfd71
--- /dev/null
+++ b/src/main/java/com/cs/postgre/util/ArticleDataBaseQuery.java
@@ -0,0 +1,29 @@
+package com.cs.postgre.util;
+
+public class ArticleDataBaseQuery {
+  
+  public static final String ARTICLE_CREATE            = " INSERT INTO article.article "
+      + "(id, basetype, types, taxonomyids, selectedtaxonomyids, organizationid,"
+      + "physicalcatalogid, logicalcatalogid, systemid, endpointid, originalinstanceid, defaultassetinstanceid,"
+      + "cloneof, versionof, klassinstanceid, parentid, path, variants, attributevariants,"
+      + "languageinstances, languagecodes, creationlanguage, ruleviolation, messages, context, summary, partnersources, relationships,"
+      + "naturerelationships, isembedded, savecomment, versionid, versiontimestamp, createdby, createdon, lastmodifiedby, lastmodified)"
+      + " VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";
+ 
+  public static final String ARTICLE_CREATE_ATTRIBUTES = "INSERT INTO {schema.article}.{article.attribute.tablename}("
+      + "id, klassinstanceid, code, language, conflictingvalues, isconflictresolved, isunique, basetype, attributeid,notification,"
+      + "isshouldviolated, context, variantinstanceid, value, valueasexpression, valueasnumber, valueashtml,"
+      + "originalinstanceid, tags, ismandatoryviolated, duplicatestatus, versionid,"
+      + "versiontimestamp, createdby, createdon, lastmodifiedby, lastmodified)"
+      + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
+  
+  public static final String ARTICLE_CREATE_TAGS       = "INSERT INTO {schema.article}.{article.tags.tablename}("
+      + "id, klassinstanceid, conflictingvalues, ismatchandmerge, tagid, basetype,"
+      + "notification, isconflictresolved, isshouldviolated, ismandatoryviolated, variantinstanceid, contextinstanceid,"
+      + "tagvalues, versionid, versiontimestamp, createdby, createdon, lastmodifiedby, lastmodified)"
+      + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";
+  
+  public static final String ARTICLE_CREATE_LANG       = "INSERT INTO {schema.article}.{article.language.tablename}(id, langid, name)VALUES (?, ?, ?)";
+  
+  public static final String ARTICLE_GET         = " SELECT * FROM article.article WHERE id = ? ";
+}
diff --git a/src/main/java/com/cs/postgre/util/DatabaseConnection.java b/src/main/java/com/cs/postgre/util/DatabaseConnection.java
index fcabbec..ea952b7 100644
--- a/src/main/java/com/cs/postgre/util/DatabaseConnection.java
+++ b/src/main/java/com/cs/postgre/util/DatabaseConnection.java
@@ -10,6 +10,9 @@ public class DatabaseConnection {
   private static BasicDataSource         bDataSource           = null;
   private static ThreadLocal<Connection> connectionThreadLocal = new ThreadLocal<Connection>();
   
+  public static BasicDataSource         bDataSourceTemp1           = null;
+  public static BasicDataSource         bDataSourceTemp2           = null;
+  
   static {
     if (bDataSource == null) {
       synchronized (DatabaseConnection.class) {
@@ -28,6 +31,43 @@ public class DatabaseConnection {
     }
   }
   
+  static {
+    if (bDataSourceTemp1 == null) {
+      synchronized (DatabaseConnection.class) {
+        bDataSourceTemp1 = new BasicDataSource();
+        bDataSourceTemp1.setDriverClassName(PostgreConnectionDetails.DRIVER_CLASS_NAME);
+        bDataSourceTemp1.setUsername(PostgreConnectionDetails.USER_NAME);
+        bDataSourceTemp1.setPassword(PostgreConnectionDetails.PASSWORD);
+        bDataSourceTemp1.setUrl(PostgreConnectionDetails.URL);
+        bDataSourceTemp1.setInitialSize(PostgreConnectionDetails.INITIAL_CONNECTION_SIZE);
+        bDataSourceTemp1.setMaxActive(PostgreConnectionDetails.MAX_ACTIVE_CONNECTION);
+        bDataSourceTemp1.setMinIdle(5);
+        bDataSourceTemp1.setMaxIdle(15);
+        bDataSourceTemp1.setPoolPreparedStatements(true);
+        bDataSourceTemp1.setMaxOpenPreparedStatements(PostgreConnectionDetails.MAX_OPEN_PREPAREED_STATEMENTS);
+      }
+    }
+  }
+  
+  static {
+    if (bDataSourceTemp2 == null) {
+      synchronized (DatabaseConnection.class) {
+        bDataSourceTemp2 = new BasicDataSource();
+        bDataSourceTemp2.setDriverClassName(PostgreConnectionDetails.DRIVER_CLASS_NAME);
+        bDataSourceTemp2.setUsername(PostgreConnectionDetails.USER_NAME);
+        bDataSourceTemp2.setPassword(PostgreConnectionDetails.PASSWORD);
+        bDataSourceTemp2.setUrl(PostgreConnectionDetails.URL);
+        bDataSourceTemp2.setInitialSize(PostgreConnectionDetails.INITIAL_CONNECTION_SIZE);
+        bDataSourceTemp2.setMaxActive(PostgreConnectionDetails.MAX_ACTIVE_CONNECTION);
+        bDataSourceTemp2.setMinIdle(5);
+        bDataSourceTemp2.setMaxIdle(15);
+        bDataSourceTemp2.setPoolPreparedStatements(true);
+        bDataSourceTemp2.setMaxOpenPreparedStatements(PostgreConnectionDetails.MAX_OPEN_PREPAREED_STATEMENTS);
+      }
+    }
+  }
+  
+  
   public static Connection getConnection() throws SQLException
   {
     Connection connection = connectionThreadLocal.get();
diff --git a/src/main/java/com/cs/runtime/interactor/entity/AbstractContentInstance.java b/src/main/java/com/cs/runtime/interactor/entity/AbstractContentInstance.java
index 3bf6282..0945a35 100644
--- a/src/main/java/com/cs/runtime/interactor/entity/AbstractContentInstance.java
+++ b/src/main/java/com/cs/runtime/interactor/entity/AbstractContentInstance.java
@@ -126,6 +126,9 @@ public abstract class AbstractContentInstance extends AbstractKlassInstance impl
   @Override
   public IContextInstance getContext()
   {
+    if (context == null) {
+      context = new ContextInstance();
+    }
     return context;
   }
 
@@ -140,6 +143,9 @@ public abstract class AbstractContentInstance extends AbstractKlassInstance impl
   @Override
   public IKlassInstanceVersionSummary getSummary()
   {
+    if (summary == null) {
+      summary = new KlassInstanceVersionSummary();
+    }
     return summary;
   }
 
