<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/beans 
            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.springframework.org/schema/tx 
            http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
            http://www.springframework.org/schema/context 
            http://www.springframework.org/schema/context/spring-context-3.0.xsd
            http://www.springframework.org/schema/aop 
            http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
            http://www.springframework.org/schema/data/jpa
            http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
            http://www.springframework.org/schema/util 
            http://www.springframework.org/schema/util/spring-util-2.5.xsd
            http://www.springframework.org/schema/task 
            http://www.springframework.org/schema/task/spring-task-3.0.xsd 
            ">


	<!-- Root Context: defines shared resources visible to all other web components -->


	<context:component-scan
		base-package="com.cs.print.*, com.cs.pim.*, com.cs.bds.*,
		              com.cs.etl.*, com.cs.di.*, com.cs.dam.*, 
		              com.cs.core.*,com.cs.base.*, com.cs.workflow.*, com.cs.startup.*, com.cs.poc.*"/>
	<aop:aspectj-autoproxy />

	<!-- For information on how to fetch contents -->
	<bean id="runtimeKlassSettings"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations">
			<list>
				<value>classpath*:runtimeKlassSettings.properties</value>
			</list>
		</property>
	</bean>
	<context:property-placeholder location="${DATABASE_PROPERTIES}, ${DATA_INTEGRATION_PROPERTIES}, ${SAML}, ${AUDIT_LOG_PROPERTIES}, ${PXP_LOG_PROPERTIES}"/>


	<bean id="logServerIP" class="java.lang.String">
		<constructor-arg value="192.168.134.131" />
	</bean>

	<bean id="logServerPort" class="java.lang.String">
		<constructor-arg value="9200" />
	</bean>

	<bean id="loggerMode" class="java.lang.String">
		<constructor-arg value="server" />
	</bean>

	<bean id="logFilePath" class="java.lang.String">
		<constructor-arg value="/opt/cs/LoadBal/ContentSphereLog.log" />
	</bean>

	<bean id="kafkaLogDocType" class="java.lang.String">
		<constructor-arg value="kafkalog" />
	</bean>

	<bean id="shouldMaintainArchives" class="java.lang.Integer">	
		<constructor-arg value="-1" />
	</bean>
	
	<bean id="assetStoreProtocol" class="java.lang.String">
		<constructor-arg value="${asset.protocol}" />
	</bean>

	<bean id="assetStoreHost" class="java.lang.String">
		<constructor-arg value="${asset.host}" />
	</bean>

	<bean id="assetStorePort" class="java.lang.String">
		<constructor-arg value="${asset.port}" />
	</bean>

	<bean id="assetStoreURL" class="java.lang.String">
		<constructor-arg
			value="#{assetStoreProtocol + '://' + assetStoreHost + ':' + assetStorePort + '/'}" />
	</bean>

	<bean id="assetServerAuthURL" class="java.lang.String">
		<constructor-arg value="#{assetStoreURL + 'auth/v1.0/'}" />
	</bean>

	<util:map id="assetStoreAuthenticationMap">
		<entry key="account" value="${asset.account}" />
		<entry key="user" value="${asset.user}" />
		<entry key="passkey" value="${asset.passkey}" />
	</util:map>

	<bean id="defaultUserPassword" class="java.lang.String">
		<constructor-arg value="${defaultUserPassword}" />
	</bean>

	<util:list id="cookies" value-type="java.lang.String">
	</util:list>

	<bean id="neo4jHost" class="java.lang.String">
		<constructor-arg value="localhost" />
	</bean>

	<bean id="neo4jPort" class="java.lang.String">
		<constructor-arg value="7474" />
	</bean>

	<bean id="neo4jUser" class="java.lang.String">
		<constructor-arg value="neo4j" />
	</bean>

	<bean id="neo4jPassword" class="java.lang.String">
		<constructor-arg value="pass1234" />
	</bean>

	<util:map id="mandatoryData">
		<entry key="ownerId" value="" />
	</util:map>

	<bean id="smtpUsername" class="java.lang.String">
		<constructor-arg value="no-reply@contentserv.com" />
	</bean>

	<bean id="smtpPassword" class="java.lang.String">
		<constructor-arg value="Contentserv@123" />
	</bean>

	<bean id="smtpHost" class="java.lang.String">
		<constructor-arg value="smtp.office365.com" />
	</bean>

	<bean id="smtpPort" class="java.lang.String">
		<constructor-arg value="587" />
	</bean>

	<bean id="newSetTypeName" class="java.lang.String">
		<constructor-arg value="SetKlass" />
	</bean>

	<bean id="newCollectionTypeName" class="java.lang.String">
		<constructor-arg value="Sammlung" />
	</bean>

	<bean id="upperThreshold" class="java.lang.Double">
		<constructor-arg value="40.00" />
	</bean>

	<bean id="lowerThreshold" class="java.lang.Double">
		<constructor-arg value="20.00" />
	</bean>

	<bean id="articleKlassCounter" class="java.lang.Long">
		<constructor-arg value="1" />
	</bean>

	<bean id="setKlassCounter" class="java.lang.Long">
		<constructor-arg value="1" />
	</bean>


	<bean id="taskKlassCounter" class="java.lang.Long">
		<constructor-arg value="1" />
	</bean>

	<bean id="assetKlassCounter" class="java.lang.Long">
		<constructor-arg value="1" />
	</bean>
	
	<bean id="marketKlassCounter" class="java.lang.Long">
		<constructor-arg value="1" />
	</bean>


	<bean id="supplierKlassCounter" class="java.lang.Long">
		<constructor-arg value="1" />
	</bean>

	<bean id="textassetKlassCounter" class="java.lang.Long">
		<constructor-arg value="1" />
	</bean>

	<bean id="editorialCounter" class="java.lang.Long">
		<constructor-arg value="1" />
	</bean>

	<!-- orientdb config starts -->

	<bean id="orientDBHost" class="java.lang.String">
		<constructor-arg value="${orientdb.host}" />
	</bean>

	<bean id="orientDBPort" class="java.lang.String">
		<constructor-arg value="${orientdb.port}" />
	</bean>

	<bean id="orientDBUser" class="java.lang.String">
		<constructor-arg value="${orientdb.user}" />
	</bean>

	<bean id="orientDBPassword" class="java.lang.String">
		<constructor-arg value="${orientdb.password}" />
	</bean>

	<bean id="orientDBdatabase" class="java.lang.String">
		<constructor-arg value="${orientdb.database}" />
	</bean>
	<!-- orientdb ends -->

	<!-- postgress config starts -->

	<bean id="postgresHost" class="java.lang.String">
		<constructor-arg value="${postgres.host}" />
	</bean>

	<bean id="postgresPort" class="java.lang.String">
		<constructor-arg value="${postgres.port}" />
	</bean>

	<bean id="postgresdatabase" class="java.lang.String">
		<constructor-arg value="${postgres.database}" />
	</bean>

	<bean id="postgresuser" class="java.lang.String">
		<constructor-arg value="${postgres.user}" />
	</bean>

	<bean id="postgrespassword" class="java.lang.String">
		<constructor-arg value="${postgres.password}" />
	</bean>

	<!-- postgress ends -->
	
	<!-- OracleDB config starts -->

	<bean id="oracleDBDriverClass" class="java.lang.String">
		<constructor-arg value="${oracle.driverClass}" />
	</bean>

	<bean id="oracleDBURL" class="java.lang.String">
		<constructor-arg
			value="${oracle.dburlprefix}:${oracle.drivertype}:@${oracle.host}:${oracle.port}:${oracle.sid}" />
	</bean>

	<bean id="oracleDBUserName" class="java.lang.String">
		<constructor-arg value="${oracle.user}" />
	</bean>

	<bean id="oracleDBPassword" class="java.lang.String">
		<constructor-arg value="${oracle.password}" />
	</bean>

	<!-- OracleDB ends -->
	<bean id="promotionTagId" class="java.lang.String">
		<constructor-arg value="afc32dcf-df4d-4f81-881f-2612d3fb6a5f" />
	</bean>

	<bean id="numberOfFeaturedProducts" class="java.lang.String">
		<constructor-arg value="10" />
	</bean>

	<bean id="listPriceAttributeId" class="java.lang.String">
		<constructor-arg value="listpriceattribute" />
	</bean>

	<bean id="sellingPriceAttributeId" class="java.lang.String">
		<constructor-arg value="sellingpriceattribute" />
	</bean>

	<bean id="marketingTextAttributeId" class="java.lang.String">
		<constructor-arg value="descriptionattribute" />
	</bean>

	<bean id="exportCsvPath" class="java.lang.String">
		<constructor-arg value="D:/ExportedCSV/" />
	</bean>

	<!-- For module specific exceptions -->

	<bean id="articleException"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations">
			<list>
				<value>classpath*:articleException.properties</value>
			</list>
		</property>
	</bean>

	<bean id="assetException"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations">
			<list>
				<value>classpath*:assetException.properties</value>
			</list>
		</property>
	</bean>

	<bean id="marketException"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations">
			<list>
				<value>classpath*:marketException.properties</value>
			</list>
		</property>
	</bean>

	<bean id="supplierException"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations">
			<list>
				<value>classpath*:supplierException.properties</value>
			</list>
		</property>
	</bean>

	<bean id="textAssetException"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations">
			<list>
				<value>classpath*:textAssetException.properties</value>
			</list>
		</property>
	</bean>

	<!-- Asset Server Beans -->

	<bean id="assetServerDetails" class="com.cs.core.config.interactor.model.asset.AssetServerDetailsModel" />

	<bean id="assetFilesPath" class="java.lang.String">
		<constructor-arg value="" />
	</bean>

	<util:map id="assetUploadStatusMap" scope="singleton"
		map-class="java.util.HashMap">
	</util:map>

	<bean id="inddServerProtocol" class="java.lang.String">
		<constructor-arg value="http" />
	</bean>

	<bean id="inddServerHost" class="java.lang.String">
		<constructor-arg value="192.168.134.4" />
	</bean>

	<bean id="inddServerPort" class="java.lang.String">
		<constructor-arg value="3112" />
	</bean>

	<bean id="inddJsxFilePathOnServer" class="java.lang.String">
		<constructor-arg
			value="/Users/inbetween/Desktop/Contentsphere/csinddplugincaller.jsx" />
	</bean>

	<bean id="requestQueue" class="java.lang.String">
		<constructor-arg value="request" />
	</bean>

	<bean id="isOracle" class="java.lang.Boolean">
		<constructor-arg value="false" />
	</bean>

	<util:list id="createdProjectSpecificStandardData"
		value-type="java.lang.String">
	</util:list>

	<bean id="isOrient" class="java.lang.Boolean">
		<constructor-arg value="true" />
	</bean>

	<bean id="numberOfPartitions" class="java.lang.Integer">
		<constructor-arg value="5" />
	</bean>

	<bean id="numberOfReplication" class="java.lang.Integer">
		<constructor-arg value="1" />
	</bean>

	<bean id="responseQueue" class="java.lang.String">
		<constructor-arg value="response" />
	</bean>

	<bean id="zooKeeperHosts" class="java.lang.String">
		<constructor-arg value="localhost:2181" />
	</bean>

	<util:map id="producerPartitionMap" scope="singleton"
		map-class="java.util.concurrent.ConcurrentHashMap">
	</util:map>

	<util:map id="consumerPartitionMap" scope="singleton"
		map-class="java.util.concurrent.ConcurrentHashMap">
	</util:map>

	<bean id="numberOfResponsePartitions" class="java.lang.Integer">
		<constructor-arg value="200" />
	</bean>

	<bean id="maxNumberOfRetries" class="java.lang.Integer">
		<constructor-arg value="6" />
	</bean>


	<bean id="isKafkaEnabled" class="java.lang.Boolean">
		<constructor-arg value="false" />
	</bean>

	<bean id="shouldCheckForRedundancyForAttachments" class="java.lang.Boolean">
		<constructor-arg value="false" />
	</bean>

	<!-- talend config starts -->

	<bean id="talendHost" class="java.lang.String">
		<constructor-arg value="${talend.host}" />
	</bean>

	<bean id="talendPort" class="java.lang.String">
		<constructor-arg value="${talend.port}" />
	</bean>

	<bean id="talendProtocol" class="java.lang.String">
		<constructor-arg value="${talend.protocol}" />
	</bean>

	<bean id="talendContext" class="java.lang.String">
		<constructor-arg value="${talend.context}" />
	</bean>
	
	<bean id="talendImageFolderPath" class="java.lang.String">
		<constructor-arg value="${talend.imageFolderPath}" />
	</bean>
	
	<!-- talend ends -->

	<!-- TASK EXECUTORS -->
	<bean id="taskExecutor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="1" />
		<property name="maxPoolSize" value="12" />
		<property name="WaitForTasksToCompleteOnShutdown" value="true" />
	</bean>
	
	<bean id="migrationTaskExecutor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="1" />
		<property name="maxPoolSize" value="10" />
		<property name="WaitForTasksToCompleteOnShutdown" value="true" />
	</bean>

	<util:map id="languageContentLabelMap">
		<entry key="de_DE" value="Neues" />
		<entry key="en_US" value="New" />
		<entry key="en_UK" value="New" />
		<entry key="fr_FR" value="Nouveau" />
		<entry key="es_ES" value="Nuevo" />
	</util:map>

	<task:scheduled-tasks scheduler="dailyScheduler">
		<task:scheduled ref="dailyTaskScheduler" method="initialize"
			cron="0 0 0 * * ?" />
	</task:scheduled-tasks>

	<task:scheduler id="dailyScheduler" />

	<bean id="dueDateReminder" class="java.lang.Integer">
		<constructor-arg value="4" />
	</bean>

	<bean id="exportFolderPath" class="java.lang.String">
		<constructor-arg value="ExportedFiles" />
	</bean>
	<bean id="hotFolderPath" class="java.lang.String">
		<constructor-arg value="UploadSourceFiles" />
	</bean>

	<bean id="importExportLogFolderPath" class="java.lang.String">
		<constructor-arg value="LogSourceFiles" />
	</bean>

	<bean id="exportFileName" class="java.lang.String">
		<constructor-arg value="ExportedFile" />
	</bean>

	<util:map id="iconIdMap" key-type="java.lang.String"
		value-type="java.lang.String"></util:map>

	<bean id="dictionaryFolderPath" class="java.lang.String">
		<constructor-arg value="UITranslations" />
	</bean>

	<bean id="defaultLanguage" class="java.lang.String">
		<constructor-arg value="en_US" />
	</bean>
	
	<bean id="goldenArticleKlassCounter" class="java.lang.Long">
		<constructor-arg value="1" />
	</bean>
	<bean id="executeWithLoadBalancer" class="java.lang.Boolean">
		<constructor-arg value="false" />
	</bean>

	<bean id="loadBalancingStrategy"
		class="com.cs.core.runtime.strategy.usecase.loadbalancer.ribbon.CSLoadBalancingRibbonStrategy">
	</bean>
	
	<bean id="elasticLoadBalancerLog" class="java.lang.String">
		<constructor-arg value="/opt/cs/LoadBal/elastic.log" />
	</bean>
	

	<!-- CAMUNDA -->


 <bean id="dataSource"
    class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
    <property name="targetDataSource">
      <bean class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
        <property name="driverClass" value="${camunda.driverclass}" />
        <property name="url"
          value="${camunda.dburl}" />
        <property name="username" value="${camunda.username}" />
        <property name="password" value="${camunda.password}" />
      </bean>
    </property>
  </bean>

  <bean id="transactionManager"
    class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource" />
  </bean>

  <bean id="processEngineConfiguration"
    class="com.cs.core.config.strategy.cammunda.broadcast.CamundaCustomSpringProcessEngineConfiguration">
    <property name="processEngineName" value="default" />
    <property name="dataSource" ref="dataSource" />
    <property name="transactionManager" ref="transactionManager" />
    <property name="databaseSchemaUpdate" value="true" />
    <property name="jdbcBatchProcessing" value="true" />
    <property name="jobExecutorActivate" value="${camunda.jobExecutorActivate}" />
    <property name="createIncidentOnFailedJobEnabled" value="false" />
    <property name="deploymentResources" value="classpath*:*.*mn" />
    <property name="defaultNumberOfRetries" value="${camunda.defaultNumberOfRetries}" />
  </bean>

  <bean id="processEngine" class="org.camunda.bpm.engine.spring.ProcessEngineFactoryBean">
    <property name="processEngineConfiguration" ref="processEngineConfiguration" />
  </bean>

  <bean id="repositoryService" factory-bean="processEngine"
    factory-method="getRepositoryService" />
  <bean id="runtimeService" factory-bean="processEngine"
    factory-method="getRuntimeService" />
  <bean id="taskService" factory-bean="processEngine"
    factory-method="getTaskService" />
  <bean id="historyService" factory-bean="processEngine"
    factory-method="getHistoryService" />
  <bean id="managementService" factory-bean="processEngine"
    factory-method="getManagementService" />
    <bean id="formService" factory-bean="processEngine"
    factory-method="getFormService" />

  <context:annotation-config />

	<bean id="orientLoadBalancerLog" class="java.lang.String">
		<constructor-arg value="/opt/cs/LoadBal/orient.log" />
	</bean>
	
	<bean id="numberOfReplicasInClusterMode" class="java.lang.String">
		<constructor-arg value="2" />
	</bean>
	
	<bean id="isKafkaLoggingEnabled" class="java.lang.Boolean">
		<constructor-arg value="true" />
	</bean>
	
	<bean id = "readTimeOut" class = "java.lang.Integer">
		<constructor-arg value = "300000"/>
	</bean>

	<!-- JMS Connection Properties -->

	<bean id="jndiContextFactory" class="java.lang.String">
		<constructor-arg
			value="org.apache.activemq.jndi.ActiveMQInitialContextFactory" />
	</bean>

	<bean id="connectionFactoryName" class="java.lang.String">
		<constructor-arg value="QueueConnectionFactory" />
	</bean>

	<bean id="jmsUsername" class="java.lang.String">
		<constructor-arg value="" />
	</bean>

	<bean id="jmsPassword" class="java.lang.String">
		<constructor-arg value="" />
	</bean>
	
	<bean id="jmsConcurrency" class="java.lang.String">
		<constructor-arg value="1-1" />
	</bean>
	
	<!-- Velocity Template Engine -->

	<bean id="velocityEngine" class="org.apache.velocity.app.VelocityEngine">
		<constructor-arg ref="velocityProperties"></constructor-arg>
	</bean>
	
	<bean id="velocityProperties"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations">
			<list>
				<value>classpath*:velocityTemplate.properties</value>
			</list>
		</property>
    </bean>
    
    <bean id="postgresDataSource"
    class="org.apache.commons.dbcp2.BasicDataSource">
        <property name="driverClassName" value="${postgre.driver.class.name}" />
        <property name="url" value="${postgre.rdbms.url}" />
        <property name="username" value="${postgre.user.name}" />
        <property name="password" value="${postgre.password}" />
        <property name="initialSize" value="${postgre.initial.connections.size}" />
        <property name="minIdle" value="${postgre.initial.connections.size}" />
        <property name="maxIdle" value="${postgre.max.active.connections}" />
        <property name="maxOpenPreparedStatements" value="${postgre.max.open.prepared.statements}" />
        <property name="maxTotal" value="${postgre.max.active.connections}"></property>
        <property name="defaultAutoCommit" value="false" />
  </bean>

  <bean id="postgresTransactionManager"
    class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="postgresDataSource" />
  </bean>
    
    <bean id="driver" class="com.cs.core.rdbms.postgres.RDBMSDriver"/>
   
    <bean name="methodInvokingFactoryBean" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
     	<property name="staticMethod" value="com.cs.core.technical.irdbms.RDBMSDriverManager.registerDriver"/>
     	<property name="arguments">
        	<list>
            	<ref bean="driver"/>
         	</list>
    	</property>
	</bean>
	
	 <bean id="appDriver" class="com.cs.core.rdbms.app.RDBMSAppDriver"/>
	 <bean name="methodInvokingFactoryBeanApp" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
     	<property name="staticMethod" value="com.cs.core.rdbms.iapp.RDBMSAppDriverManager.registerDriver"/>
     	<property name="arguments">
        	<list>
            	<ref bean="appDriver"/>
         	</list>
    	</property>
	</bean>
	
</beans>
